//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from d:\Sviluppo\GitHub\AlmaMaterStudiorum\QActorMigration\QactorParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class QactorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ID=1, INT=2, STRING=3, ML_COMMENT=4, SL_COMMENT=5, WS=6, ANY_OTHER=7, 
		VARID=8, KCODE=9, QualifiedName=10, DuePuntiSTRING=11, ExternalQActorSTRING=12, 
		MqttBrokerSTRING=13, EventSTRING=14, SignalSTRING=15, TokenSTRING=16, 
		DispatchSTRING=17, RequestCapitalSTRING=18, ReplySTRING=19, InvitationSTRING=20, 
		Context=21, IpSTRING=22, MqttSTRING=23, OpenSquareSTRING=24, HostSTRING=25, 
		PortSTRING=26, CloseSquareSTRING=27, CodedQActorSTRING=28, QActorSTRING=29, 
		ContextBNoCapitalLetterSTRING=30, ClassNameSTRING=31, OpenBraceSTRING=32, 
		CloseBraceSTRING=33, StateSTRING=34, InitialSTRING=35, IfSolvedSTRING=36, 
		ElseSTRING=37, PrintCurrentMessageSTRING=38, PrintlnSTRING=39, OpenRoundSTRING=40, 
		CloseRoundSTRING=41, SolveSTRING=42, DiscardMsgSTRING=43, MemoCurrentTimeSTRING=44, 
		SetDurationSTRING=45, OnSTRING=46, OffSTRING=47, FromSTRING=48, ForwardSTRING=49, 
		EmitSTRING=50, MSTRING=51, RequestNoCapitalSTRING=52, ReplyToSTRING=53, 
		AskForSTRING=54, WithSTRING=55, DelaySTRING=56, DelayVarSTRING=57, DelayVarRefSTRING=58, 
		DelaySolSTRING=59, OnMsgSTRING=60, TerminateSTRING=61, UpdateResourceSTRING=62, 
		QrunSTRING=63, MyselfSTRING=64, RunSTRING=65, MachineExecSTRING=66, GotoSTRING=67, 
		IfSTRING=68, TransitionSTRING=69, WhenTimeSTRING=70, ArrowSTRING=71, WhenTimeVarSTRING=72, 
		WhenTimeVarRefSTRING=73, WhenTimeSolSTRING=74, WhenEventSTRING=75, WhenMsgSTRING=76, 
		WhenRequestSTRING=77, WhenReplySTRING=78, AndSTRING=79, VirgilaSTRING=80, 
		SimbolDollarSTRING=81, SimbolHashSTRING=82, SimbolAtSTRING=83;
	public const int
		RULE_qactorSystemSpec = 0, RULE_brokerSpec = 1, RULE_messageX = 2, RULE_outOnlyMessage = 3, 
		RULE_outInMessage = 4, RULE_event = 5, RULE_signal = 6, RULE_token = 7, 
		RULE_dispatch = 8, RULE_request = 9, RULE_reply = 10, RULE_invitation = 11, 
		RULE_contextP = 12, RULE_componentIP = 13, RULE_qActorDeclaration = 14, 
		RULE_qActorExternal = 15, RULE_qActorCoded = 16, RULE_qActor = 17, RULE_state = 18, 
		RULE_stateAction = 19, RULE_ifSolvedAction = 20, RULE_guardedStateAction = 21, 
		RULE_printCurMsg = 22, RULE_print = 23, RULE_solveGoal = 24, RULE_discardMsg = 25, 
		RULE_memoTime = 26, RULE_durationX = 27, RULE_forward = 28, RULE_emit = 29, 
		RULE_demand = 30, RULE_answer = 31, RULE_replyReq = 32, RULE_delay = 33, 
		RULE_delayInt = 34, RULE_delayVar = 35, RULE_delayVref = 36, RULE_delaySol = 37, 
		RULE_msgCond = 38, RULE_endActor = 39, RULE_updateResource = 40, RULE_noMsgCond = 41, 
		RULE_anyAction = 42, RULE_codeRun = 43, RULE_codeRunActor = 44, RULE_codeRunSimple = 45, 
		RULE_exec = 46, RULE_transitionX = 47, RULE_emptyTransition = 48, RULE_nonEmptyTransition = 49, 
		RULE_timeout = 50, RULE_timeoutInt = 51, RULE_timeoutVar = 52, RULE_timeoutVarRef = 53, 
		RULE_timeoutSol = 54, RULE_inputTransition = 55, RULE_eventTransSwitch = 56, 
		RULE_msgTransSwitch = 57, RULE_requestTransSwitch = 58, RULE_replyTransSwitch = 59, 
		RULE_pHead = 60, RULE_pAtom = 61, RULE_pAtomString = 62, RULE_pAtomic = 63, 
		RULE_pAtomNum = 64, RULE_pStructRef = 65, RULE_pStruct = 66, RULE_variableX = 67, 
		RULE_varRef = 68, RULE_varRefInStr = 69, RULE_varSolRef = 70;
	public static readonly string[] ruleNames = {
		"qactorSystemSpec", "brokerSpec", "messageX", "outOnlyMessage", "outInMessage", 
		"event", "signal", "token", "dispatch", "request", "reply", "invitation", 
		"contextP", "componentIP", "qActorDeclaration", "qActorExternal", "qActorCoded", 
		"qActor", "state", "stateAction", "ifSolvedAction", "guardedStateAction", 
		"printCurMsg", "print", "solveGoal", "discardMsg", "memoTime", "durationX", 
		"forward", "emit", "demand", "answer", "replyReq", "delay", "delayInt", 
		"delayVar", "delayVref", "delaySol", "msgCond", "endActor", "updateResource", 
		"noMsgCond", "anyAction", "codeRun", "codeRunActor", "codeRunSimple", 
		"exec", "transitionX", "emptyTransition", "nonEmptyTransition", "timeout", 
		"timeoutInt", "timeoutVar", "timeoutVarRef", "timeoutSol", "inputTransition", 
		"eventTransSwitch", "msgTransSwitch", "requestTransSwitch", "replyTransSwitch", 
		"pHead", "pAtom", "pAtomString", "pAtomic", "pAtomNum", "pStructRef", 
		"pStruct", "variableX", "varRef", "varRefInStr", "varSolRef"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, "':'", 
		"'ExternalQActor'", "'mqttBroker'", "'Event'", "'Signal'", "'Token'", 
		"'Dispatch'", "'Request'", "'Reply'", "'Invitation'", "'Context'", "'ip'", 
		"'+mqtt'", "'['", "'host='", "'port='", "']'", "'CodedQActor'", "'QActor'", 
		"'context'", "'className'", "'{'", "'}'", "'State'", "'initial'", "'ifSolved'", 
		"'else'", "'printCurrentMessage'", "'println'", "'('", "')'", "'solve'", 
		"'discardMsg'", "'memoCurrentTime'", "'setDuration'", "'On'", "'Off'", 
		"'from'", "'forward'", "'emit'", "'-m'", "'request'", "'replyTo'", "'askFor'", 
		"'with'", "'delay'", "'delayVar'", "'delayVarRef'", "'delaySol'", "'onMsg'", 
		"'terminate'", "'updateResource'", "'qrun'", "'myself'", "'run'", "'machineExec'", 
		"'Goto'", "'if'", "'Transition'", "'whenTime'", "'->'", "'whenTimeVar'", 
		"'whenTimeVarRef'", "'whenTimeSol'", "'whenEvent'", "'whenMsg'", "'whenRequest'", 
		"'whenReply'", "'and'", "','", "'$'", "'#'", "'@'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ID", "INT", "STRING", "ML_COMMENT", "SL_COMMENT", "WS", "ANY_OTHER", 
		"VARID", "KCODE", "QualifiedName", "DuePuntiSTRING", "ExternalQActorSTRING", 
		"MqttBrokerSTRING", "EventSTRING", "SignalSTRING", "TokenSTRING", "DispatchSTRING", 
		"RequestCapitalSTRING", "ReplySTRING", "InvitationSTRING", "Context", 
		"IpSTRING", "MqttSTRING", "OpenSquareSTRING", "HostSTRING", "PortSTRING", 
		"CloseSquareSTRING", "CodedQActorSTRING", "QActorSTRING", "ContextBNoCapitalLetterSTRING", 
		"ClassNameSTRING", "OpenBraceSTRING", "CloseBraceSTRING", "StateSTRING", 
		"InitialSTRING", "IfSolvedSTRING", "ElseSTRING", "PrintCurrentMessageSTRING", 
		"PrintlnSTRING", "OpenRoundSTRING", "CloseRoundSTRING", "SolveSTRING", 
		"DiscardMsgSTRING", "MemoCurrentTimeSTRING", "SetDurationSTRING", "OnSTRING", 
		"OffSTRING", "FromSTRING", "ForwardSTRING", "EmitSTRING", "MSTRING", "RequestNoCapitalSTRING", 
		"ReplyToSTRING", "AskForSTRING", "WithSTRING", "DelaySTRING", "DelayVarSTRING", 
		"DelayVarRefSTRING", "DelaySolSTRING", "OnMsgSTRING", "TerminateSTRING", 
		"UpdateResourceSTRING", "QrunSTRING", "MyselfSTRING", "RunSTRING", "MachineExecSTRING", 
		"GotoSTRING", "IfSTRING", "TransitionSTRING", "WhenTimeSTRING", "ArrowSTRING", 
		"WhenTimeVarSTRING", "WhenTimeVarRefSTRING", "WhenTimeSolSTRING", "WhenEventSTRING", 
		"WhenMsgSTRING", "WhenRequestSTRING", "WhenReplySTRING", "AndSTRING", 
		"VirgilaSTRING", "SimbolDollarSTRING", "SimbolHashSTRING", "SimbolAtSTRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QactorParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static QactorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QactorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QactorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QactorSystemSpecContext : ParserRuleContext {
		public IToken name;
		public BrokerSpecContext mqttBroker;
		public MessageXContext _messageX;
		public IList<MessageXContext> _message = new List<MessageXContext>();
		public ContextPContext _contextP;
		public IList<ContextPContext> _context = new List<ContextPContext>();
		public QActorDeclarationContext _qActorDeclaration;
		public IList<QActorDeclarationContext> _actor = new List<QActorDeclarationContext>();
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public BrokerSpecContext brokerSpec() {
			return GetRuleContext<BrokerSpecContext>(0);
		}
		public MessageXContext[] messageX() {
			return GetRuleContexts<MessageXContext>();
		}
		public MessageXContext messageX(int i) {
			return GetRuleContext<MessageXContext>(i);
		}
		public ContextPContext[] contextP() {
			return GetRuleContexts<ContextPContext>();
		}
		public ContextPContext contextP(int i) {
			return GetRuleContext<ContextPContext>(i);
		}
		public QActorDeclarationContext[] qActorDeclaration() {
			return GetRuleContexts<QActorDeclarationContext>();
		}
		public QActorDeclarationContext qActorDeclaration(int i) {
			return GetRuleContext<QActorDeclarationContext>(i);
		}
		public QactorSystemSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qactorSystemSpec; } }
	}

	[RuleVersion(0)]
	public QactorSystemSpecContext qactorSystemSpec() {
		QactorSystemSpecContext _localctx = new QactorSystemSpecContext(Context, State);
		EnterRule(_localctx, 0, RULE_qactorSystemSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; _localctx.name = Match(ID);
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MqttBrokerSTRING) {
				{
				State = 143; _localctx.mqttBroker = brokerSpec();
				}
			}

			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EventSTRING) | (1L << SignalSTRING) | (1L << TokenSTRING) | (1L << DispatchSTRING) | (1L << RequestCapitalSTRING) | (1L << ReplySTRING) | (1L << InvitationSTRING))) != 0)) {
				{
				{
				State = 146; _localctx._messageX = messageX();
				_localctx._message.Add(_localctx._messageX);
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Context) {
				{
				{
				State = 152; _localctx._contextP = contextP();
				_localctx._context.Add(_localctx._contextP);
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ExternalQActorSTRING) | (1L << CodedQActorSTRING) | (1L << QActorSTRING))) != 0)) {
				{
				{
				State = 158; _localctx._qActorDeclaration = qActorDeclaration();
				_localctx._actor.Add(_localctx._qActorDeclaration);
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BrokerSpecContext : ParserRuleContext {
		public IToken brokerHost;
		public IToken brokerPort;
		public ITerminalNode MqttBrokerSTRING() { return GetToken(QactorParser.MqttBrokerSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode STRING() { return GetToken(QactorParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(QactorParser.INT, 0); }
		public BrokerSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_brokerSpec; } }
	}

	[RuleVersion(0)]
	public BrokerSpecContext brokerSpec() {
		BrokerSpecContext _localctx = new BrokerSpecContext(Context, State);
		EnterRule(_localctx, 2, RULE_brokerSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(MqttBrokerSTRING);
			State = 165; _localctx.brokerHost = Match(STRING);
			State = 166; Match(DuePuntiSTRING);
			State = 167; _localctx.brokerPort = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MessageXContext : ParserRuleContext {
		public OutOnlyMessageContext outOnlyMessage() {
			return GetRuleContext<OutOnlyMessageContext>(0);
		}
		public OutInMessageContext outInMessage() {
			return GetRuleContext<OutInMessageContext>(0);
		}
		public MessageXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_messageX; } }
	}

	[RuleVersion(0)]
	public MessageXContext messageX() {
		MessageXContext _localctx = new MessageXContext(Context, State);
		EnterRule(_localctx, 4, RULE_messageX);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EventSTRING:
			case SignalSTRING:
			case TokenSTRING:
			case DispatchSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 169; outOnlyMessage();
				}
				break;
			case RequestCapitalSTRING:
			case ReplySTRING:
			case InvitationSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 170; outInMessage();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutOnlyMessageContext : ParserRuleContext {
		public DispatchContext dispatch() {
			return GetRuleContext<DispatchContext>(0);
		}
		public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		public SignalContext signal() {
			return GetRuleContext<SignalContext>(0);
		}
		public TokenContext token() {
			return GetRuleContext<TokenContext>(0);
		}
		public OutOnlyMessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outOnlyMessage; } }
	}

	[RuleVersion(0)]
	public OutOnlyMessageContext outOnlyMessage() {
		OutOnlyMessageContext _localctx = new OutOnlyMessageContext(Context, State);
		EnterRule(_localctx, 6, RULE_outOnlyMessage);
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DispatchSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 173; dispatch();
				}
				break;
			case EventSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 174; @event();
				}
				break;
			case SignalSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175; signal();
				}
				break;
			case TokenSTRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 176; token();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutInMessageContext : ParserRuleContext {
		public RequestContext request() {
			return GetRuleContext<RequestContext>(0);
		}
		public ReplyContext reply() {
			return GetRuleContext<ReplyContext>(0);
		}
		public InvitationContext invitation() {
			return GetRuleContext<InvitationContext>(0);
		}
		public OutInMessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outInMessage; } }
	}

	[RuleVersion(0)]
	public OutInMessageContext outInMessage() {
		OutInMessageContext _localctx = new OutInMessageContext(Context, State);
		EnterRule(_localctx, 8, RULE_outInMessage);
		try {
			State = 182;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RequestCapitalSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 179; request();
				}
				break;
			case ReplySTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 180; reply();
				}
				break;
			case InvitationSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 181; invitation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		public IToken name;
		public PHeadContext msg;
		public ITerminalNode EventSTRING() { return GetToken(QactorParser.EventSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 10, RULE_event);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; Match(EventSTRING);
			State = 185; _localctx.name = Match(ID);
			State = 186; Match(DuePuntiSTRING);
			State = 187; _localctx.msg = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalContext : ParserRuleContext {
		public IToken name;
		public PHeadContext msg;
		public ITerminalNode SignalSTRING() { return GetToken(QactorParser.SignalSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public SignalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signal; } }
	}

	[RuleVersion(0)]
	public SignalContext signal() {
		SignalContext _localctx = new SignalContext(Context, State);
		EnterRule(_localctx, 12, RULE_signal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(SignalSTRING);
			State = 190; _localctx.name = Match(ID);
			State = 191; Match(DuePuntiSTRING);
			State = 192; _localctx.msg = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TokenContext : ParserRuleContext {
		public IToken name;
		public PHeadContext msg;
		public ITerminalNode TokenSTRING() { return GetToken(QactorParser.TokenSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public TokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_token; } }
	}

	[RuleVersion(0)]
	public TokenContext token() {
		TokenContext _localctx = new TokenContext(Context, State);
		EnterRule(_localctx, 14, RULE_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194; Match(TokenSTRING);
			State = 195; _localctx.name = Match(ID);
			State = 196; Match(DuePuntiSTRING);
			State = 197; _localctx.msg = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DispatchContext : ParserRuleContext {
		public IToken name;
		public PHeadContext msg;
		public ITerminalNode DispatchSTRING() { return GetToken(QactorParser.DispatchSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public DispatchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dispatch; } }
	}

	[RuleVersion(0)]
	public DispatchContext dispatch() {
		DispatchContext _localctx = new DispatchContext(Context, State);
		EnterRule(_localctx, 16, RULE_dispatch);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(DispatchSTRING);
			State = 200; _localctx.name = Match(ID);
			State = 201; Match(DuePuntiSTRING);
			State = 202; _localctx.msg = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestContext : ParserRuleContext {
		public IToken name;
		public PHeadContext msg;
		public ITerminalNode RequestCapitalSTRING() { return GetToken(QactorParser.RequestCapitalSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public RequestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_request; } }
	}

	[RuleVersion(0)]
	public RequestContext request() {
		RequestContext _localctx = new RequestContext(Context, State);
		EnterRule(_localctx, 18, RULE_request);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(RequestCapitalSTRING);
			State = 205; _localctx.name = Match(ID);
			State = 206; Match(DuePuntiSTRING);
			State = 207; _localctx.msg = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplyContext : ParserRuleContext {
		public IToken name;
		public PHeadContext msg;
		public ITerminalNode ReplySTRING() { return GetToken(QactorParser.ReplySTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public ReplyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reply; } }
	}

	[RuleVersion(0)]
	public ReplyContext reply() {
		ReplyContext _localctx = new ReplyContext(Context, State);
		EnterRule(_localctx, 20, RULE_reply);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; Match(ReplySTRING);
			State = 210; _localctx.name = Match(ID);
			State = 211; Match(DuePuntiSTRING);
			State = 212; _localctx.msg = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InvitationContext : ParserRuleContext {
		public IToken name;
		public PHeadContext msg;
		public ITerminalNode InvitationSTRING() { return GetToken(QactorParser.InvitationSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public InvitationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_invitation; } }
	}

	[RuleVersion(0)]
	public InvitationContext invitation() {
		InvitationContext _localctx = new InvitationContext(Context, State);
		EnterRule(_localctx, 22, RULE_invitation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(InvitationSTRING);
			State = 215; _localctx.name = Match(ID);
			State = 216; Match(DuePuntiSTRING);
			State = 217; _localctx.msg = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextPContext : ParserRuleContext {
		public IToken name;
		public ComponentIPContext ip;
		public IToken mqtt;
		public ITerminalNode Context() { return GetToken(QactorParser.Context, 0); }
		public ITerminalNode IpSTRING() { return GetToken(QactorParser.IpSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public ComponentIPContext componentIP() {
			return GetRuleContext<ComponentIPContext>(0);
		}
		public ITerminalNode MqttSTRING() { return GetToken(QactorParser.MqttSTRING, 0); }
		public ContextPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextP; } }
	}

	[RuleVersion(0)]
	public ContextPContext contextP() {
		ContextPContext _localctx = new ContextPContext(Context, State);
		EnterRule(_localctx, 24, RULE_contextP);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 219; Match(Context);
			State = 220; _localctx.name = Match(ID);
			State = 221; Match(IpSTRING);
			State = 222; _localctx.ip = componentIP();
			State = 224;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MqttSTRING) {
				{
				State = 223; _localctx.mqtt = Match(MqttSTRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentIPContext : ParserRuleContext {
		public IToken host;
		public IToken port;
		public ITerminalNode OpenSquareSTRING() { return GetToken(QactorParser.OpenSquareSTRING, 0); }
		public ITerminalNode HostSTRING() { return GetToken(QactorParser.HostSTRING, 0); }
		public ITerminalNode PortSTRING() { return GetToken(QactorParser.PortSTRING, 0); }
		public ITerminalNode CloseSquareSTRING() { return GetToken(QactorParser.CloseSquareSTRING, 0); }
		public ITerminalNode STRING() { return GetToken(QactorParser.STRING, 0); }
		public ITerminalNode INT() { return GetToken(QactorParser.INT, 0); }
		public ComponentIPContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentIP; } }
	}

	[RuleVersion(0)]
	public ComponentIPContext componentIP() {
		ComponentIPContext _localctx = new ComponentIPContext(Context, State);
		EnterRule(_localctx, 26, RULE_componentIP);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 226; Match(OpenSquareSTRING);
			State = 227; Match(HostSTRING);
			State = 228; _localctx.host = Match(STRING);
			State = 229; Match(PortSTRING);
			State = 230; _localctx.port = Match(INT);
			State = 231; Match(CloseSquareSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QActorDeclarationContext : ParserRuleContext {
		public QActorContext qActor() {
			return GetRuleContext<QActorContext>(0);
		}
		public QActorCodedContext qActorCoded() {
			return GetRuleContext<QActorCodedContext>(0);
		}
		public QActorExternalContext qActorExternal() {
			return GetRuleContext<QActorExternalContext>(0);
		}
		public QActorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qActorDeclaration; } }
	}

	[RuleVersion(0)]
	public QActorDeclarationContext qActorDeclaration() {
		QActorDeclarationContext _localctx = new QActorDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_qActorDeclaration);
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QActorSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 233; qActor();
				}
				break;
			case CodedQActorSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 234; qActorCoded();
				}
				break;
			case ExternalQActorSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 235; qActorExternal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QActorExternalContext : ParserRuleContext {
		public IToken name;
		public ContextPContext context;
		public ITerminalNode ExternalQActorSTRING() { return GetToken(QactorParser.ExternalQActorSTRING, 0); }
		public ITerminalNode ContextBNoCapitalLetterSTRING() { return GetToken(QactorParser.ContextBNoCapitalLetterSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public ContextPContext contextP() {
			return GetRuleContext<ContextPContext>(0);
		}
		public QActorExternalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qActorExternal; } }
	}

	[RuleVersion(0)]
	public QActorExternalContext qActorExternal() {
		QActorExternalContext _localctx = new QActorExternalContext(Context, State);
		EnterRule(_localctx, 30, RULE_qActorExternal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; Match(ExternalQActorSTRING);
			State = 239; _localctx.name = Match(ID);
			State = 240; Match(ContextBNoCapitalLetterSTRING);
			State = 241; _localctx.context = contextP();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QActorCodedContext : ParserRuleContext {
		public IToken name;
		public ContextPContext context;
		public IToken className;
		public ITerminalNode CodedQActorSTRING() { return GetToken(QactorParser.CodedQActorSTRING, 0); }
		public ITerminalNode ContextBNoCapitalLetterSTRING() { return GetToken(QactorParser.ContextBNoCapitalLetterSTRING, 0); }
		public ITerminalNode ClassNameSTRING() { return GetToken(QactorParser.ClassNameSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public ContextPContext contextP() {
			return GetRuleContext<ContextPContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(QactorParser.STRING, 0); }
		public QActorCodedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qActorCoded; } }
	}

	[RuleVersion(0)]
	public QActorCodedContext qActorCoded() {
		QActorCodedContext _localctx = new QActorCodedContext(Context, State);
		EnterRule(_localctx, 32, RULE_qActorCoded);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; Match(CodedQActorSTRING);
			State = 244; _localctx.name = Match(ID);
			State = 245; Match(ContextBNoCapitalLetterSTRING);
			State = 246; _localctx.context = contextP();
			State = 247; Match(ClassNameSTRING);
			State = 248; _localctx.className = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QActorContext : ParserRuleContext {
		public IToken name;
		public ContextPContext context;
		public AnyActionContext start;
		public StateContext _state;
		public IList<StateContext> _states = new List<StateContext>();
		public ITerminalNode QActorSTRING() { return GetToken(QactorParser.QActorSTRING, 0); }
		public ITerminalNode ContextBNoCapitalLetterSTRING() { return GetToken(QactorParser.ContextBNoCapitalLetterSTRING, 0); }
		public ITerminalNode OpenBraceSTRING() { return GetToken(QactorParser.OpenBraceSTRING, 0); }
		public ITerminalNode CloseBraceSTRING() { return GetToken(QactorParser.CloseBraceSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public ContextPContext contextP() {
			return GetRuleContext<ContextPContext>(0);
		}
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public StateContext[] state() {
			return GetRuleContexts<StateContext>();
		}
		public StateContext state(int i) {
			return GetRuleContext<StateContext>(i);
		}
		public QActorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qActor; } }
	}

	[RuleVersion(0)]
	public QActorContext qActor() {
		QActorContext _localctx = new QActorContext(Context, State);
		EnterRule(_localctx, 34, RULE_qActor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250; Match(QActorSTRING);
			State = 251; _localctx.name = Match(ID);
			State = 252; Match(ContextBNoCapitalLetterSTRING);
			State = 253; _localctx.context = contextP();
			State = 254; Match(OpenBraceSTRING);
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenSquareSTRING) {
				{
				State = 255; _localctx.start = anyAction();
				}
			}

			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==StateSTRING) {
				{
				{
				State = 258; _localctx._state = state();
				_localctx._states.Add(_localctx._state);
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 264; Match(CloseBraceSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateContext : ParserRuleContext {
		public IToken name;
		public IToken normal;
		public StateActionContext _stateAction;
		public IList<StateActionContext> _actions = new List<StateActionContext>();
		public TransitionXContext transition;
		public ITerminalNode StateSTRING() { return GetToken(QactorParser.StateSTRING, 0); }
		public ITerminalNode OpenBraceSTRING() { return GetToken(QactorParser.OpenBraceSTRING, 0); }
		public ITerminalNode CloseBraceSTRING() { return GetToken(QactorParser.CloseBraceSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public ITerminalNode InitialSTRING() { return GetToken(QactorParser.InitialSTRING, 0); }
		public StateActionContext[] stateAction() {
			return GetRuleContexts<StateActionContext>();
		}
		public StateActionContext stateAction(int i) {
			return GetRuleContext<StateActionContext>(i);
		}
		public TransitionXContext transitionX() {
			return GetRuleContext<TransitionXContext>(0);
		}
		public StateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_state; } }
	}

	[RuleVersion(0)]
	public StateContext state() {
		StateContext _localctx = new StateContext(Context, State);
		EnterRule(_localctx, 36, RULE_state);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266; Match(StateSTRING);
			State = 267; _localctx.name = Match(ID);
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==InitialSTRING) {
				{
				State = 268; _localctx.normal = Match(InitialSTRING);
				}
			}

			State = 271; Match(OpenBraceSTRING);
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (OpenSquareSTRING - 24)) | (1L << (IfSolvedSTRING - 24)) | (1L << (PrintCurrentMessageSTRING - 24)) | (1L << (PrintlnSTRING - 24)) | (1L << (SolveSTRING - 24)) | (1L << (DiscardMsgSTRING - 24)) | (1L << (MemoCurrentTimeSTRING - 24)) | (1L << (SetDurationSTRING - 24)) | (1L << (ForwardSTRING - 24)) | (1L << (EmitSTRING - 24)) | (1L << (RequestNoCapitalSTRING - 24)) | (1L << (ReplyToSTRING - 24)) | (1L << (AskForSTRING - 24)) | (1L << (DelaySTRING - 24)) | (1L << (DelayVarSTRING - 24)) | (1L << (DelayVarRefSTRING - 24)) | (1L << (DelaySolSTRING - 24)) | (1L << (OnMsgSTRING - 24)) | (1L << (TerminateSTRING - 24)) | (1L << (UpdateResourceSTRING - 24)) | (1L << (QrunSTRING - 24)) | (1L << (RunSTRING - 24)) | (1L << (MachineExecSTRING - 24)) | (1L << (IfSTRING - 24)))) != 0)) {
				{
				{
				State = 272; _localctx._stateAction = stateAction();
				_localctx._actions.Add(_localctx._stateAction);
				}
				}
				State = 277;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 278; Match(CloseBraceSTRING);
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GotoSTRING || _la==TransitionSTRING) {
				{
				State = 279; _localctx.transition = transitionX();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateActionContext : ParserRuleContext {
		public GuardedStateActionContext guardedStateAction() {
			return GetRuleContext<GuardedStateActionContext>(0);
		}
		public IfSolvedActionContext ifSolvedAction() {
			return GetRuleContext<IfSolvedActionContext>(0);
		}
		public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		public PrintCurMsgContext printCurMsg() {
			return GetRuleContext<PrintCurMsgContext>(0);
		}
		public SolveGoalContext solveGoal() {
			return GetRuleContext<SolveGoalContext>(0);
		}
		public DiscardMsgContext discardMsg() {
			return GetRuleContext<DiscardMsgContext>(0);
		}
		public MemoTimeContext memoTime() {
			return GetRuleContext<MemoTimeContext>(0);
		}
		public DurationXContext durationX() {
			return GetRuleContext<DurationXContext>(0);
		}
		public ForwardContext forward() {
			return GetRuleContext<ForwardContext>(0);
		}
		public EmitContext emit() {
			return GetRuleContext<EmitContext>(0);
		}
		public DemandContext demand() {
			return GetRuleContext<DemandContext>(0);
		}
		public AnswerContext answer() {
			return GetRuleContext<AnswerContext>(0);
		}
		public ReplyReqContext replyReq() {
			return GetRuleContext<ReplyReqContext>(0);
		}
		public DelayContext delay() {
			return GetRuleContext<DelayContext>(0);
		}
		public MsgCondContext msgCond() {
			return GetRuleContext<MsgCondContext>(0);
		}
		public EndActorContext endActor() {
			return GetRuleContext<EndActorContext>(0);
		}
		public UpdateResourceContext updateResource() {
			return GetRuleContext<UpdateResourceContext>(0);
		}
		public CodeRunContext codeRun() {
			return GetRuleContext<CodeRunContext>(0);
		}
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public ExecContext exec() {
			return GetRuleContext<ExecContext>(0);
		}
		public StateActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateAction; } }
	}

	[RuleVersion(0)]
	public StateActionContext stateAction() {
		StateActionContext _localctx = new StateActionContext(Context, State);
		EnterRule(_localctx, 38, RULE_stateAction);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IfSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282; guardedStateAction();
				}
				break;
			case IfSolvedSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 283; ifSolvedAction();
				}
				break;
			case PrintlnSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 284; print();
				}
				break;
			case PrintCurrentMessageSTRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 285; printCurMsg();
				}
				break;
			case SolveSTRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 286; solveGoal();
				}
				break;
			case DiscardMsgSTRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 287; discardMsg();
				}
				break;
			case MemoCurrentTimeSTRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 288; memoTime();
				}
				break;
			case SetDurationSTRING:
				EnterOuterAlt(_localctx, 8);
				{
				State = 289; durationX();
				}
				break;
			case ForwardSTRING:
				EnterOuterAlt(_localctx, 9);
				{
				State = 290; forward();
				}
				break;
			case EmitSTRING:
				EnterOuterAlt(_localctx, 10);
				{
				State = 291; emit();
				}
				break;
			case RequestNoCapitalSTRING:
				EnterOuterAlt(_localctx, 11);
				{
				State = 292; demand();
				}
				break;
			case ReplyToSTRING:
				EnterOuterAlt(_localctx, 12);
				{
				State = 293; answer();
				}
				break;
			case AskForSTRING:
				EnterOuterAlt(_localctx, 13);
				{
				State = 294; replyReq();
				}
				break;
			case DelaySTRING:
			case DelayVarSTRING:
			case DelayVarRefSTRING:
			case DelaySolSTRING:
				EnterOuterAlt(_localctx, 14);
				{
				State = 295; delay();
				}
				break;
			case OnMsgSTRING:
				EnterOuterAlt(_localctx, 15);
				{
				State = 296; msgCond();
				}
				break;
			case TerminateSTRING:
				EnterOuterAlt(_localctx, 16);
				{
				State = 297; endActor();
				}
				break;
			case UpdateResourceSTRING:
				EnterOuterAlt(_localctx, 17);
				{
				State = 298; updateResource();
				}
				break;
			case QrunSTRING:
			case RunSTRING:
				EnterOuterAlt(_localctx, 18);
				{
				State = 299; codeRun();
				}
				break;
			case OpenSquareSTRING:
				EnterOuterAlt(_localctx, 19);
				{
				State = 300; anyAction();
				}
				break;
			case MachineExecSTRING:
				EnterOuterAlt(_localctx, 20);
				{
				State = 301; exec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfSolvedActionContext : ParserRuleContext {
		public StateActionContext _stateAction;
		public IList<StateActionContext> _solvedactions = new List<StateActionContext>();
		public IList<StateActionContext> _notsolvedactions = new List<StateActionContext>();
		public ITerminalNode IfSolvedSTRING() { return GetToken(QactorParser.IfSolvedSTRING, 0); }
		public ITerminalNode[] OpenBraceSTRING() { return GetTokens(QactorParser.OpenBraceSTRING); }
		public ITerminalNode OpenBraceSTRING(int i) {
			return GetToken(QactorParser.OpenBraceSTRING, i);
		}
		public ITerminalNode[] CloseBraceSTRING() { return GetTokens(QactorParser.CloseBraceSTRING); }
		public ITerminalNode CloseBraceSTRING(int i) {
			return GetToken(QactorParser.CloseBraceSTRING, i);
		}
		public ITerminalNode ElseSTRING() { return GetToken(QactorParser.ElseSTRING, 0); }
		public StateActionContext[] stateAction() {
			return GetRuleContexts<StateActionContext>();
		}
		public StateActionContext stateAction(int i) {
			return GetRuleContext<StateActionContext>(i);
		}
		public IfSolvedActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifSolvedAction; } }
	}

	[RuleVersion(0)]
	public IfSolvedActionContext ifSolvedAction() {
		IfSolvedActionContext _localctx = new IfSolvedActionContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifSolvedAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			IfSolvedAction
			State = 305; Match(IfSolvedSTRING);
			State = 306; Match(OpenBraceSTRING);
			State = 310;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (OpenSquareSTRING - 24)) | (1L << (IfSolvedSTRING - 24)) | (1L << (PrintCurrentMessageSTRING - 24)) | (1L << (PrintlnSTRING - 24)) | (1L << (SolveSTRING - 24)) | (1L << (DiscardMsgSTRING - 24)) | (1L << (MemoCurrentTimeSTRING - 24)) | (1L << (SetDurationSTRING - 24)) | (1L << (ForwardSTRING - 24)) | (1L << (EmitSTRING - 24)) | (1L << (RequestNoCapitalSTRING - 24)) | (1L << (ReplyToSTRING - 24)) | (1L << (AskForSTRING - 24)) | (1L << (DelaySTRING - 24)) | (1L << (DelayVarSTRING - 24)) | (1L << (DelayVarRefSTRING - 24)) | (1L << (DelaySolSTRING - 24)) | (1L << (OnMsgSTRING - 24)) | (1L << (TerminateSTRING - 24)) | (1L << (UpdateResourceSTRING - 24)) | (1L << (QrunSTRING - 24)) | (1L << (RunSTRING - 24)) | (1L << (MachineExecSTRING - 24)) | (1L << (IfSTRING - 24)))) != 0)) {
				{
				{
				State = 307; _localctx._stateAction = stateAction();
				_localctx._solvedactions.Add(_localctx._stateAction);
				}
				}
				State = 312;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 313; Match(CloseBraceSTRING);
			State = 323;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ElseSTRING) {
				{
				State = 314; Match(ElseSTRING);
				State = 315; Match(OpenBraceSTRING);
				State = 319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (OpenSquareSTRING - 24)) | (1L << (IfSolvedSTRING - 24)) | (1L << (PrintCurrentMessageSTRING - 24)) | (1L << (PrintlnSTRING - 24)) | (1L << (SolveSTRING - 24)) | (1L << (DiscardMsgSTRING - 24)) | (1L << (MemoCurrentTimeSTRING - 24)) | (1L << (SetDurationSTRING - 24)) | (1L << (ForwardSTRING - 24)) | (1L << (EmitSTRING - 24)) | (1L << (RequestNoCapitalSTRING - 24)) | (1L << (ReplyToSTRING - 24)) | (1L << (AskForSTRING - 24)) | (1L << (DelaySTRING - 24)) | (1L << (DelayVarSTRING - 24)) | (1L << (DelayVarRefSTRING - 24)) | (1L << (DelaySolSTRING - 24)) | (1L << (OnMsgSTRING - 24)) | (1L << (TerminateSTRING - 24)) | (1L << (UpdateResourceSTRING - 24)) | (1L << (QrunSTRING - 24)) | (1L << (RunSTRING - 24)) | (1L << (MachineExecSTRING - 24)) | (1L << (IfSTRING - 24)))) != 0)) {
					{
					{
					State = 316; _localctx._stateAction = stateAction();
					_localctx._notsolvedactions.Add(_localctx._stateAction);
					}
					}
					State = 321;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 322; Match(CloseBraceSTRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GuardedStateActionContext : ParserRuleContext {
		public AnyActionContext guard;
		public StateActionContext _stateAction;
		public IList<StateActionContext> _okactions = new List<StateActionContext>();
		public IList<StateActionContext> _koactions = new List<StateActionContext>();
		public ITerminalNode IfSTRING() { return GetToken(QactorParser.IfSTRING, 0); }
		public ITerminalNode[] OpenBraceSTRING() { return GetTokens(QactorParser.OpenBraceSTRING); }
		public ITerminalNode OpenBraceSTRING(int i) {
			return GetToken(QactorParser.OpenBraceSTRING, i);
		}
		public ITerminalNode[] CloseBraceSTRING() { return GetTokens(QactorParser.CloseBraceSTRING); }
		public ITerminalNode CloseBraceSTRING(int i) {
			return GetToken(QactorParser.CloseBraceSTRING, i);
		}
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public ITerminalNode ElseSTRING() { return GetToken(QactorParser.ElseSTRING, 0); }
		public StateActionContext[] stateAction() {
			return GetRuleContexts<StateActionContext>();
		}
		public StateActionContext stateAction(int i) {
			return GetRuleContext<StateActionContext>(i);
		}
		public GuardedStateActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_guardedStateAction; } }
	}

	[RuleVersion(0)]
	public GuardedStateActionContext guardedStateAction() {
		GuardedStateActionContext _localctx = new GuardedStateActionContext(Context, State);
		EnterRule(_localctx, 42, RULE_guardedStateAction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			GuardedStateAction
			State = 326; Match(IfSTRING);
			State = 327; _localctx.guard = anyAction();
			State = 328; Match(OpenBraceSTRING);
			State = 332;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (OpenSquareSTRING - 24)) | (1L << (IfSolvedSTRING - 24)) | (1L << (PrintCurrentMessageSTRING - 24)) | (1L << (PrintlnSTRING - 24)) | (1L << (SolveSTRING - 24)) | (1L << (DiscardMsgSTRING - 24)) | (1L << (MemoCurrentTimeSTRING - 24)) | (1L << (SetDurationSTRING - 24)) | (1L << (ForwardSTRING - 24)) | (1L << (EmitSTRING - 24)) | (1L << (RequestNoCapitalSTRING - 24)) | (1L << (ReplyToSTRING - 24)) | (1L << (AskForSTRING - 24)) | (1L << (DelaySTRING - 24)) | (1L << (DelayVarSTRING - 24)) | (1L << (DelayVarRefSTRING - 24)) | (1L << (DelaySolSTRING - 24)) | (1L << (OnMsgSTRING - 24)) | (1L << (TerminateSTRING - 24)) | (1L << (UpdateResourceSTRING - 24)) | (1L << (QrunSTRING - 24)) | (1L << (RunSTRING - 24)) | (1L << (MachineExecSTRING - 24)) | (1L << (IfSTRING - 24)))) != 0)) {
				{
				{
				State = 329; _localctx._stateAction = stateAction();
				_localctx._okactions.Add(_localctx._stateAction);
				}
				}
				State = 334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 335; Match(CloseBraceSTRING);
			State = 345;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ElseSTRING) {
				{
				State = 336; Match(ElseSTRING);
				State = 337; Match(OpenBraceSTRING);
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (OpenSquareSTRING - 24)) | (1L << (IfSolvedSTRING - 24)) | (1L << (PrintCurrentMessageSTRING - 24)) | (1L << (PrintlnSTRING - 24)) | (1L << (SolveSTRING - 24)) | (1L << (DiscardMsgSTRING - 24)) | (1L << (MemoCurrentTimeSTRING - 24)) | (1L << (SetDurationSTRING - 24)) | (1L << (ForwardSTRING - 24)) | (1L << (EmitSTRING - 24)) | (1L << (RequestNoCapitalSTRING - 24)) | (1L << (ReplyToSTRING - 24)) | (1L << (AskForSTRING - 24)) | (1L << (DelaySTRING - 24)) | (1L << (DelayVarSTRING - 24)) | (1L << (DelayVarRefSTRING - 24)) | (1L << (DelaySolSTRING - 24)) | (1L << (OnMsgSTRING - 24)) | (1L << (TerminateSTRING - 24)) | (1L << (UpdateResourceSTRING - 24)) | (1L << (QrunSTRING - 24)) | (1L << (RunSTRING - 24)) | (1L << (MachineExecSTRING - 24)) | (1L << (IfSTRING - 24)))) != 0)) {
					{
					{
					State = 338; _localctx._stateAction = stateAction();
					_localctx._koactions.Add(_localctx._stateAction);
					}
					}
					State = 343;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 344; Match(CloseBraceSTRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintCurMsgContext : ParserRuleContext {
		public ITerminalNode PrintCurrentMessageSTRING() { return GetToken(QactorParser.PrintCurrentMessageSTRING, 0); }
		public PrintCurMsgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printCurMsg; } }
	}

	[RuleVersion(0)]
	public PrintCurMsgContext printCurMsg() {
		PrintCurMsgContext _localctx = new PrintCurMsgContext(Context, State);
		EnterRule(_localctx, 44, RULE_printCurMsg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			PrintCurMsg
			State = 348; Match(PrintCurrentMessageSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		public PHeadContext args;
		public ITerminalNode PrintlnSTRING() { return GetToken(QactorParser.PrintlnSTRING, 0); }
		public ITerminalNode OpenRoundSTRING() { return GetToken(QactorParser.OpenRoundSTRING, 0); }
		public ITerminalNode CloseRoundSTRING() { return GetToken(QactorParser.CloseRoundSTRING, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 46, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			Print
			State = 351; Match(PrintlnSTRING);
			State = 352; Match(OpenRoundSTRING);
			State = 353; _localctx.args = pHead();
			State = 354; Match(CloseRoundSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SolveGoalContext : ParserRuleContext {
		public PHeadContext goal;
		public VariableXContext resVar;
		public ITerminalNode SolveSTRING() { return GetToken(QactorParser.SolveSTRING, 0); }
		public ITerminalNode OpenRoundSTRING() { return GetToken(QactorParser.OpenRoundSTRING, 0); }
		public ITerminalNode CloseRoundSTRING() { return GetToken(QactorParser.CloseRoundSTRING, 0); }
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public ITerminalNode VirgilaSTRING() { return GetToken(QactorParser.VirgilaSTRING, 0); }
		public VariableXContext variableX() {
			return GetRuleContext<VariableXContext>(0);
		}
		public SolveGoalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_solveGoal; } }
	}

	[RuleVersion(0)]
	public SolveGoalContext solveGoal() {
		SolveGoalContext _localctx = new SolveGoalContext(Context, State);
		EnterRule(_localctx, 48, RULE_solveGoal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			SolveGoal
			State = 357; Match(SolveSTRING);
			State = 358; Match(OpenRoundSTRING);
			State = 359; _localctx.goal = pHead();
			State = 362;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VirgilaSTRING) {
				{
				State = 360; Match(VirgilaSTRING);
				State = 361; _localctx.resVar = variableX();
				}
			}

			State = 364; Match(CloseRoundSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardMsgContext : ParserRuleContext {
		public IToken discard;
		public ITerminalNode DiscardMsgSTRING() { return GetToken(QactorParser.DiscardMsgSTRING, 0); }
		public ITerminalNode OffSTRING() { return GetToken(QactorParser.OffSTRING, 0); }
		public ITerminalNode OnSTRING() { return GetToken(QactorParser.OnSTRING, 0); }
		public DiscardMsgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardMsg; } }
	}

	[RuleVersion(0)]
	public DiscardMsgContext discardMsg() {
		DiscardMsgContext _localctx = new DiscardMsgContext(Context, State);
		EnterRule(_localctx, 50, RULE_discardMsg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			DiscardMsg
			State = 367; Match(DiscardMsgSTRING);
			State = 370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OnSTRING:
				{
				State = 368; _localctx.discard = Match(OnSTRING);
				}
				break;
			case OffSTRING:
				{
				State = 369; Match(OffSTRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoTimeContext : ParserRuleContext {
		public IToken store;
		public ITerminalNode MemoCurrentTimeSTRING() { return GetToken(QactorParser.MemoCurrentTimeSTRING, 0); }
		public ITerminalNode VARID() { return GetToken(QactorParser.VARID, 0); }
		public MemoTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memoTime; } }
	}

	[RuleVersion(0)]
	public MemoTimeContext memoTime() {
		MemoTimeContext _localctx = new MemoTimeContext(Context, State);
		EnterRule(_localctx, 52, RULE_memoTime);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			MemoTime
			State = 373; Match(MemoCurrentTimeSTRING);
			State = 374; _localctx.store = Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DurationXContext : ParserRuleContext {
		public IToken store;
		public IToken start;
		public ITerminalNode SetDurationSTRING() { return GetToken(QactorParser.SetDurationSTRING, 0); }
		public ITerminalNode FromSTRING() { return GetToken(QactorParser.FromSTRING, 0); }
		public ITerminalNode[] VARID() { return GetTokens(QactorParser.VARID); }
		public ITerminalNode VARID(int i) {
			return GetToken(QactorParser.VARID, i);
		}
		public DurationXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_durationX; } }
	}

	[RuleVersion(0)]
	public DurationXContext durationX() {
		DurationXContext _localctx = new DurationXContext(Context, State);
		EnterRule(_localctx, 54, RULE_durationX);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			Duration
			State = 377; Match(SetDurationSTRING);
			State = 378; _localctx.store = Match(VARID);
			State = 379; Match(FromSTRING);
			State = 380; _localctx.start = Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForwardContext : ParserRuleContext {
		public QActorDeclarationContext dest;
		public DispatchContext msgref;
		public PHeadContext val;
		public ITerminalNode ForwardSTRING() { return GetToken(QactorParser.ForwardSTRING, 0); }
		public ITerminalNode MSTRING() { return GetToken(QactorParser.MSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public QActorDeclarationContext qActorDeclaration() {
			return GetRuleContext<QActorDeclarationContext>(0);
		}
		public DispatchContext dispatch() {
			return GetRuleContext<DispatchContext>(0);
		}
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public ForwardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forward; } }
	}

	[RuleVersion(0)]
	public ForwardContext forward() {
		ForwardContext _localctx = new ForwardContext(Context, State);
		EnterRule(_localctx, 56, RULE_forward);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 382; Match(ForwardSTRING);
			State = 383; _localctx.dest = qActorDeclaration();
			State = 384; Match(MSTRING);
			State = 385; _localctx.msgref = dispatch();
			State = 386; Match(DuePuntiSTRING);
			State = 387; _localctx.val = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitContext : ParserRuleContext {
		public EventContext msgref;
		public PHeadContext val;
		public ITerminalNode EmitSTRING() { return GetToken(QactorParser.EmitSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public EmitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emit; } }
	}

	[RuleVersion(0)]
	public EmitContext emit() {
		EmitContext _localctx = new EmitContext(Context, State);
		EnterRule(_localctx, 58, RULE_emit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; Match(EmitSTRING);
			State = 390; _localctx.msgref = @event();
			State = 391; Match(DuePuntiSTRING);
			State = 392; _localctx.val = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DemandContext : ParserRuleContext {
		public QActorDeclarationContext dest;
		public RequestContext msgref;
		public PHeadContext val;
		public ITerminalNode RequestNoCapitalSTRING() { return GetToken(QactorParser.RequestNoCapitalSTRING, 0); }
		public ITerminalNode MSTRING() { return GetToken(QactorParser.MSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public QActorDeclarationContext qActorDeclaration() {
			return GetRuleContext<QActorDeclarationContext>(0);
		}
		public RequestContext request() {
			return GetRuleContext<RequestContext>(0);
		}
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public DemandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_demand; } }
	}

	[RuleVersion(0)]
	public DemandContext demand() {
		DemandContext _localctx = new DemandContext(Context, State);
		EnterRule(_localctx, 60, RULE_demand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(RequestNoCapitalSTRING);
			State = 395; _localctx.dest = qActorDeclaration();
			State = 396; Match(MSTRING);
			State = 397; _localctx.msgref = request();
			State = 398; Match(DuePuntiSTRING);
			State = 399; _localctx.val = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnswerContext : ParserRuleContext {
		public RequestContext reqref;
		public ReplyContext msgref;
		public PHeadContext val;
		public ITerminalNode ReplyToSTRING() { return GetToken(QactorParser.ReplyToSTRING, 0); }
		public ITerminalNode WithSTRING() { return GetToken(QactorParser.WithSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public RequestContext request() {
			return GetRuleContext<RequestContext>(0);
		}
		public ReplyContext reply() {
			return GetRuleContext<ReplyContext>(0);
		}
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public AnswerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_answer; } }
	}

	[RuleVersion(0)]
	public AnswerContext answer() {
		AnswerContext _localctx = new AnswerContext(Context, State);
		EnterRule(_localctx, 62, RULE_answer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(ReplyToSTRING);
			State = 402; _localctx.reqref = request();
			State = 403; Match(WithSTRING);
			State = 404; _localctx.msgref = reply();
			State = 405; Match(DuePuntiSTRING);
			State = 406; _localctx.val = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplyReqContext : ParserRuleContext {
		public RequestContext reqref;
		public RequestContext msgref;
		public PHeadContext val;
		public ITerminalNode AskForSTRING() { return GetToken(QactorParser.AskForSTRING, 0); }
		public ITerminalNode RequestNoCapitalSTRING() { return GetToken(QactorParser.RequestNoCapitalSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public RequestContext[] request() {
			return GetRuleContexts<RequestContext>();
		}
		public RequestContext request(int i) {
			return GetRuleContext<RequestContext>(i);
		}
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public ReplyReqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replyReq; } }
	}

	[RuleVersion(0)]
	public ReplyReqContext replyReq() {
		ReplyReqContext _localctx = new ReplyReqContext(Context, State);
		EnterRule(_localctx, 64, RULE_replyReq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 408; Match(AskForSTRING);
			State = 409; _localctx.reqref = request();
			State = 410; Match(RequestNoCapitalSTRING);
			State = 411; _localctx.msgref = request();
			State = 412; Match(DuePuntiSTRING);
			State = 413; _localctx.val = pHead();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelayContext : ParserRuleContext {
		public DelayIntContext delayInt() {
			return GetRuleContext<DelayIntContext>(0);
		}
		public DelayVarContext delayVar() {
			return GetRuleContext<DelayVarContext>(0);
		}
		public DelayVrefContext delayVref() {
			return GetRuleContext<DelayVrefContext>(0);
		}
		public DelaySolContext delaySol() {
			return GetRuleContext<DelaySolContext>(0);
		}
		public DelayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delay; } }
	}

	[RuleVersion(0)]
	public DelayContext delay() {
		DelayContext _localctx = new DelayContext(Context, State);
		EnterRule(_localctx, 66, RULE_delay);
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DelaySTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 415; delayInt();
				}
				break;
			case DelayVarSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 416; delayVar();
				}
				break;
			case DelayVarRefSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 417; delayVref();
				}
				break;
			case DelaySolSTRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 418; delaySol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelayIntContext : ParserRuleContext {
		public IToken time;
		public ITerminalNode DelaySTRING() { return GetToken(QactorParser.DelaySTRING, 0); }
		public ITerminalNode INT() { return GetToken(QactorParser.INT, 0); }
		public DelayIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayInt; } }
	}

	[RuleVersion(0)]
	public DelayIntContext delayInt() {
		DelayIntContext _localctx = new DelayIntContext(Context, State);
		EnterRule(_localctx, 68, RULE_delayInt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421; Match(DelaySTRING);
			State = 422; _localctx.time = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelayVarContext : ParserRuleContext {
		public VariableXContext refvar;
		public ITerminalNode DelayVarSTRING() { return GetToken(QactorParser.DelayVarSTRING, 0); }
		public VariableXContext variableX() {
			return GetRuleContext<VariableXContext>(0);
		}
		public DelayVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayVar; } }
	}

	[RuleVersion(0)]
	public DelayVarContext delayVar() {
		DelayVarContext _localctx = new DelayVarContext(Context, State);
		EnterRule(_localctx, 70, RULE_delayVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 424; Match(DelayVarSTRING);
			State = 425; _localctx.refvar = variableX();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelayVrefContext : ParserRuleContext {
		public VarRefContext reftime;
		public ITerminalNode DelayVarRefSTRING() { return GetToken(QactorParser.DelayVarRefSTRING, 0); }
		public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public DelayVrefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delayVref; } }
	}

	[RuleVersion(0)]
	public DelayVrefContext delayVref() {
		DelayVrefContext _localctx = new DelayVrefContext(Context, State);
		EnterRule(_localctx, 72, RULE_delayVref);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; Match(DelayVarRefSTRING);
			State = 428; _localctx.reftime = varRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelaySolContext : ParserRuleContext {
		public VarSolRefContext refsoltime;
		public ITerminalNode DelaySolSTRING() { return GetToken(QactorParser.DelaySolSTRING, 0); }
		public VarSolRefContext varSolRef() {
			return GetRuleContext<VarSolRefContext>(0);
		}
		public DelaySolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delaySol; } }
	}

	[RuleVersion(0)]
	public DelaySolContext delaySol() {
		DelaySolContext _localctx = new DelaySolContext(Context, State);
		EnterRule(_localctx, 74, RULE_delaySol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(DelaySolSTRING);
			State = 431; _localctx.refsoltime = varSolRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MsgCondContext : ParserRuleContext {
		public MessageXContext message;
		public PHeadContext msg;
		public StateActionContext _stateAction;
		public IList<StateActionContext> _condactions = new List<StateActionContext>();
		public NoMsgCondContext ifnot;
		public ITerminalNode OnMsgSTRING() { return GetToken(QactorParser.OnMsgSTRING, 0); }
		public ITerminalNode OpenRoundSTRING() { return GetToken(QactorParser.OpenRoundSTRING, 0); }
		public ITerminalNode DuePuntiSTRING() { return GetToken(QactorParser.DuePuntiSTRING, 0); }
		public ITerminalNode CloseRoundSTRING() { return GetToken(QactorParser.CloseRoundSTRING, 0); }
		public ITerminalNode OpenBraceSTRING() { return GetToken(QactorParser.OpenBraceSTRING, 0); }
		public ITerminalNode CloseBraceSTRING() { return GetToken(QactorParser.CloseBraceSTRING, 0); }
		public MessageXContext messageX() {
			return GetRuleContext<MessageXContext>(0);
		}
		public PHeadContext pHead() {
			return GetRuleContext<PHeadContext>(0);
		}
		public ITerminalNode ElseSTRING() { return GetToken(QactorParser.ElseSTRING, 0); }
		public StateActionContext[] stateAction() {
			return GetRuleContexts<StateActionContext>();
		}
		public StateActionContext stateAction(int i) {
			return GetRuleContext<StateActionContext>(i);
		}
		public NoMsgCondContext noMsgCond() {
			return GetRuleContext<NoMsgCondContext>(0);
		}
		public MsgCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_msgCond; } }
	}

	[RuleVersion(0)]
	public MsgCondContext msgCond() {
		MsgCondContext _localctx = new MsgCondContext(Context, State);
		EnterRule(_localctx, 76, RULE_msgCond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 433; Match(OnMsgSTRING);
			State = 434; Match(OpenRoundSTRING);
			State = 435; _localctx.message = messageX();
			State = 436; Match(DuePuntiSTRING);
			State = 437; _localctx.msg = pHead();
			State = 438; Match(CloseRoundSTRING);
			State = 439; Match(OpenBraceSTRING);
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (OpenSquareSTRING - 24)) | (1L << (IfSolvedSTRING - 24)) | (1L << (PrintCurrentMessageSTRING - 24)) | (1L << (PrintlnSTRING - 24)) | (1L << (SolveSTRING - 24)) | (1L << (DiscardMsgSTRING - 24)) | (1L << (MemoCurrentTimeSTRING - 24)) | (1L << (SetDurationSTRING - 24)) | (1L << (ForwardSTRING - 24)) | (1L << (EmitSTRING - 24)) | (1L << (RequestNoCapitalSTRING - 24)) | (1L << (ReplyToSTRING - 24)) | (1L << (AskForSTRING - 24)) | (1L << (DelaySTRING - 24)) | (1L << (DelayVarSTRING - 24)) | (1L << (DelayVarRefSTRING - 24)) | (1L << (DelaySolSTRING - 24)) | (1L << (OnMsgSTRING - 24)) | (1L << (TerminateSTRING - 24)) | (1L << (UpdateResourceSTRING - 24)) | (1L << (QrunSTRING - 24)) | (1L << (RunSTRING - 24)) | (1L << (MachineExecSTRING - 24)) | (1L << (IfSTRING - 24)))) != 0)) {
				{
				{
				State = 440; _localctx._stateAction = stateAction();
				_localctx._condactions.Add(_localctx._stateAction);
				}
				}
				State = 445;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 446; Match(CloseBraceSTRING);
			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ElseSTRING) {
				{
				State = 447; Match(ElseSTRING);
				State = 448; _localctx.ifnot = noMsgCond();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndActorContext : ParserRuleContext {
		public IToken arg;
		public ITerminalNode TerminateSTRING() { return GetToken(QactorParser.TerminateSTRING, 0); }
		public ITerminalNode INT() { return GetToken(QactorParser.INT, 0); }
		public EndActorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endActor; } }
	}

	[RuleVersion(0)]
	public EndActorContext endActor() {
		EndActorContext _localctx = new EndActorContext(Context, State);
		EnterRule(_localctx, 78, RULE_endActor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; Match(TerminateSTRING);
			State = 452; _localctx.arg = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateResourceContext : ParserRuleContext {
		public AnyActionContext val;
		public ITerminalNode UpdateResourceSTRING() { return GetToken(QactorParser.UpdateResourceSTRING, 0); }
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public UpdateResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateResource; } }
	}

	[RuleVersion(0)]
	public UpdateResourceContext updateResource() {
		UpdateResourceContext _localctx = new UpdateResourceContext(Context, State);
		EnterRule(_localctx, 80, RULE_updateResource);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			UpdateResource
			State = 455; Match(UpdateResourceSTRING);
			State = 456; _localctx.val = anyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoMsgCondContext : ParserRuleContext {
		public StateActionContext _stateAction;
		public IList<StateActionContext> _notcondactions = new List<StateActionContext>();
		public ITerminalNode OpenBraceSTRING() { return GetToken(QactorParser.OpenBraceSTRING, 0); }
		public ITerminalNode CloseBraceSTRING() { return GetToken(QactorParser.CloseBraceSTRING, 0); }
		public StateActionContext[] stateAction() {
			return GetRuleContexts<StateActionContext>();
		}
		public StateActionContext stateAction(int i) {
			return GetRuleContext<StateActionContext>(i);
		}
		public NoMsgCondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noMsgCond; } }
	}

	[RuleVersion(0)]
	public NoMsgCondContext noMsgCond() {
		NoMsgCondContext _localctx = new NoMsgCondContext(Context, State);
		EnterRule(_localctx, 82, RULE_noMsgCond);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			NoMsgCond
			State = 459; Match(OpenBraceSTRING);
			State = 463;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 24)) & ~0x3f) == 0 && ((1L << (_la - 24)) & ((1L << (OpenSquareSTRING - 24)) | (1L << (IfSolvedSTRING - 24)) | (1L << (PrintCurrentMessageSTRING - 24)) | (1L << (PrintlnSTRING - 24)) | (1L << (SolveSTRING - 24)) | (1L << (DiscardMsgSTRING - 24)) | (1L << (MemoCurrentTimeSTRING - 24)) | (1L << (SetDurationSTRING - 24)) | (1L << (ForwardSTRING - 24)) | (1L << (EmitSTRING - 24)) | (1L << (RequestNoCapitalSTRING - 24)) | (1L << (ReplyToSTRING - 24)) | (1L << (AskForSTRING - 24)) | (1L << (DelaySTRING - 24)) | (1L << (DelayVarSTRING - 24)) | (1L << (DelayVarRefSTRING - 24)) | (1L << (DelaySolSTRING - 24)) | (1L << (OnMsgSTRING - 24)) | (1L << (TerminateSTRING - 24)) | (1L << (UpdateResourceSTRING - 24)) | (1L << (QrunSTRING - 24)) | (1L << (RunSTRING - 24)) | (1L << (MachineExecSTRING - 24)) | (1L << (IfSTRING - 24)))) != 0)) {
				{
				{
				State = 460; _localctx._stateAction = stateAction();
				_localctx._notcondactions.Add(_localctx._stateAction);
				}
				}
				State = 465;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 466; Match(CloseBraceSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyActionContext : ParserRuleContext {
		public IToken body;
		public ITerminalNode OpenSquareSTRING() { return GetToken(QactorParser.OpenSquareSTRING, 0); }
		public ITerminalNode CloseSquareSTRING() { return GetToken(QactorParser.CloseSquareSTRING, 0); }
		public ITerminalNode KCODE() { return GetToken(QactorParser.KCODE, 0); }
		public AnyActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyAction; } }
	}

	[RuleVersion(0)]
	public AnyActionContext anyAction() {
		AnyActionContext _localctx = new AnyActionContext(Context, State);
		EnterRule(_localctx, 84, RULE_anyAction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			AnyAction
			State = 469; Match(OpenSquareSTRING);
			State = 470; _localctx.body = Match(KCODE);
			State = 471; Match(CloseSquareSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeRunContext : ParserRuleContext {
		public CodeRunActorContext codeRunActor() {
			return GetRuleContext<CodeRunActorContext>(0);
		}
		public CodeRunSimpleContext codeRunSimple() {
			return GetRuleContext<CodeRunSimpleContext>(0);
		}
		public CodeRunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeRun; } }
	}

	[RuleVersion(0)]
	public CodeRunContext codeRun() {
		CodeRunContext _localctx = new CodeRunContext(Context, State);
		EnterRule(_localctx, 86, RULE_codeRun);
		try {
			State = 475;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QrunSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 473; codeRunActor();
				}
				break;
			case RunSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 474; codeRunSimple();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeRunActorContext : ParserRuleContext {
		public IToken aitem;
		public PHeadContext _pHead;
		public IList<PHeadContext> _args = new List<PHeadContext>();
		public ITerminalNode QrunSTRING() { return GetToken(QactorParser.QrunSTRING, 0); }
		public ITerminalNode OpenRoundSTRING() { return GetToken(QactorParser.OpenRoundSTRING, 0); }
		public ITerminalNode MyselfSTRING() { return GetToken(QactorParser.MyselfSTRING, 0); }
		public ITerminalNode CloseRoundSTRING() { return GetToken(QactorParser.CloseRoundSTRING, 0); }
		public ITerminalNode QualifiedName() { return GetToken(QactorParser.QualifiedName, 0); }
		public ITerminalNode[] VirgilaSTRING() { return GetTokens(QactorParser.VirgilaSTRING); }
		public ITerminalNode VirgilaSTRING(int i) {
			return GetToken(QactorParser.VirgilaSTRING, i);
		}
		public PHeadContext[] pHead() {
			return GetRuleContexts<PHeadContext>();
		}
		public PHeadContext pHead(int i) {
			return GetRuleContext<PHeadContext>(i);
		}
		public CodeRunActorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeRunActor; } }
	}

	[RuleVersion(0)]
	public CodeRunActorContext codeRunActor() {
		CodeRunActorContext _localctx = new CodeRunActorContext(Context, State);
		EnterRule(_localctx, 88, RULE_codeRunActor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477; Match(QrunSTRING);
			State = 478; _localctx.aitem = Match(QualifiedName);
			State = 479; Match(OpenRoundSTRING);
			State = 480; Match(MyselfSTRING);
			State = 490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VirgilaSTRING) {
				{
				State = 481; Match(VirgilaSTRING);
				State = 482; _localctx._pHead = pHead();
				_localctx._args.Add(_localctx._pHead);
				State = 487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VirgilaSTRING) {
					{
					{
					State = 483; Match(VirgilaSTRING);
					State = 484; _localctx._pHead = pHead();
					_localctx._args.Add(_localctx._pHead);
					}
					}
					State = 489;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 492; Match(CloseRoundSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeRunSimpleContext : ParserRuleContext {
		public IToken bitem;
		public PHeadContext _pHead;
		public IList<PHeadContext> _args = new List<PHeadContext>();
		public ITerminalNode RunSTRING() { return GetToken(QactorParser.RunSTRING, 0); }
		public ITerminalNode OpenRoundSTRING() { return GetToken(QactorParser.OpenRoundSTRING, 0); }
		public ITerminalNode CloseRoundSTRING() { return GetToken(QactorParser.CloseRoundSTRING, 0); }
		public ITerminalNode QualifiedName() { return GetToken(QactorParser.QualifiedName, 0); }
		public PHeadContext[] pHead() {
			return GetRuleContexts<PHeadContext>();
		}
		public PHeadContext pHead(int i) {
			return GetRuleContext<PHeadContext>(i);
		}
		public ITerminalNode[] VirgilaSTRING() { return GetTokens(QactorParser.VirgilaSTRING); }
		public ITerminalNode VirgilaSTRING(int i) {
			return GetToken(QactorParser.VirgilaSTRING, i);
		}
		public CodeRunSimpleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeRunSimple; } }
	}

	[RuleVersion(0)]
	public CodeRunSimpleContext codeRunSimple() {
		CodeRunSimpleContext _localctx = new CodeRunSimpleContext(Context, State);
		EnterRule(_localctx, 90, RULE_codeRunSimple);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 494; Match(RunSTRING);
			State = 495; _localctx.bitem = Match(QualifiedName);
			State = 496; Match(OpenRoundSTRING);
			State = 505;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ID) | (1L << INT) | (1L << STRING) | (1L << VARID))) != 0) || ((((_la - 81)) & ~0x3f) == 0 && ((1L << (_la - 81)) & ((1L << (SimbolDollarSTRING - 81)) | (1L << (SimbolHashSTRING - 81)) | (1L << (SimbolAtSTRING - 81)))) != 0)) {
				{
				State = 497; _localctx._pHead = pHead();
				_localctx._args.Add(_localctx._pHead);
				State = 502;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VirgilaSTRING) {
					{
					{
					State = 498; Match(VirgilaSTRING);
					State = 499; _localctx._pHead = pHead();
					_localctx._args.Add(_localctx._pHead);
					}
					}
					State = 504;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 507; Match(CloseRoundSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecContext : ParserRuleContext {
		public IToken action;
		public ITerminalNode MachineExecSTRING() { return GetToken(QactorParser.MachineExecSTRING, 0); }
		public ITerminalNode STRING() { return GetToken(QactorParser.STRING, 0); }
		public ExecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exec; } }
	}

	[RuleVersion(0)]
	public ExecContext exec() {
		ExecContext _localctx = new ExecContext(Context, State);
		EnterRule(_localctx, 92, RULE_exec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 509; Match(MachineExecSTRING);
			State = 510; _localctx.action = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransitionXContext : ParserRuleContext {
		public EmptyTransitionContext emptyTransition() {
			return GetRuleContext<EmptyTransitionContext>(0);
		}
		public NonEmptyTransitionContext nonEmptyTransition() {
			return GetRuleContext<NonEmptyTransitionContext>(0);
		}
		public TransitionXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transitionX; } }
	}

	[RuleVersion(0)]
	public TransitionXContext transitionX() {
		TransitionXContext _localctx = new TransitionXContext(Context, State);
		EnterRule(_localctx, 94, RULE_transitionX);
		try {
			State = 514;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GotoSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512; emptyTransition();
				}
				break;
			case TransitionSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513; nonEmptyTransition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyTransitionContext : ParserRuleContext {
		public StateContext targetState;
		public AnyActionContext eguard;
		public StateContext othertargetState;
		public ITerminalNode GotoSTRING() { return GetToken(QactorParser.GotoSTRING, 0); }
		public StateContext[] state() {
			return GetRuleContexts<StateContext>();
		}
		public StateContext state(int i) {
			return GetRuleContext<StateContext>(i);
		}
		public ITerminalNode IfSTRING() { return GetToken(QactorParser.IfSTRING, 0); }
		public ITerminalNode ElseSTRING() { return GetToken(QactorParser.ElseSTRING, 0); }
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public EmptyTransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyTransition; } }
	}

	[RuleVersion(0)]
	public EmptyTransitionContext emptyTransition() {
		EmptyTransitionContext _localctx = new EmptyTransitionContext(Context, State);
		EnterRule(_localctx, 96, RULE_emptyTransition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516; Match(GotoSTRING);
			State = 517; _localctx.targetState = state();
			State = 523;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				{
				State = 518; Match(IfSTRING);
				State = 519; _localctx.eguard = anyAction();
				State = 520; Match(ElseSTRING);
				State = 521; _localctx.othertargetState = state();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonEmptyTransitionContext : ParserRuleContext {
		public IToken name;
		public TimeoutContext duration;
		public InputTransitionContext _inputTransition;
		public IList<InputTransitionContext> _trans = new List<InputTransitionContext>();
		public EmptyTransitionContext elseempty;
		public ITerminalNode TransitionSTRING() { return GetToken(QactorParser.TransitionSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public ITerminalNode ElseSTRING() { return GetToken(QactorParser.ElseSTRING, 0); }
		public TimeoutContext timeout() {
			return GetRuleContext<TimeoutContext>(0);
		}
		public InputTransitionContext[] inputTransition() {
			return GetRuleContexts<InputTransitionContext>();
		}
		public InputTransitionContext inputTransition(int i) {
			return GetRuleContext<InputTransitionContext>(i);
		}
		public EmptyTransitionContext emptyTransition() {
			return GetRuleContext<EmptyTransitionContext>(0);
		}
		public NonEmptyTransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonEmptyTransition; } }
	}

	[RuleVersion(0)]
	public NonEmptyTransitionContext nonEmptyTransition() {
		NonEmptyTransitionContext _localctx = new NonEmptyTransitionContext(Context, State);
		EnterRule(_localctx, 98, RULE_nonEmptyTransition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(TransitionSTRING);
			State = 526; _localctx.name = Match(ID);
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (WhenTimeSTRING - 70)) | (1L << (WhenTimeVarSTRING - 70)) | (1L << (WhenTimeVarRefSTRING - 70)) | (1L << (WhenTimeSolSTRING - 70)))) != 0)) {
				{
				State = 527; _localctx.duration = timeout();
				}
			}

			State = 533;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 530; _localctx._inputTransition = inputTransition();
					_localctx._trans.Add(_localctx._inputTransition);
					}
					} 
				}
				State = 535;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			State = 538;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				{
				State = 536; Match(ElseSTRING);
				State = 537; _localctx.elseempty = emptyTransition();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeoutContext : ParserRuleContext {
		public TimeoutIntContext timeoutInt() {
			return GetRuleContext<TimeoutIntContext>(0);
		}
		public TimeoutVarContext timeoutVar() {
			return GetRuleContext<TimeoutVarContext>(0);
		}
		public TimeoutSolContext timeoutSol() {
			return GetRuleContext<TimeoutSolContext>(0);
		}
		public TimeoutVarRefContext timeoutVarRef() {
			return GetRuleContext<TimeoutVarRefContext>(0);
		}
		public TimeoutContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeout; } }
	}

	[RuleVersion(0)]
	public TimeoutContext timeout() {
		TimeoutContext _localctx = new TimeoutContext(Context, State);
		EnterRule(_localctx, 100, RULE_timeout);
		try {
			State = 544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WhenTimeSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 540; timeoutInt();
				}
				break;
			case WhenTimeVarSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 541; timeoutVar();
				}
				break;
			case WhenTimeSolSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 542; timeoutSol();
				}
				break;
			case WhenTimeVarRefSTRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 543; timeoutVarRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeoutIntContext : ParserRuleContext {
		public IToken msec;
		public StateContext targetState;
		public ITerminalNode WhenTimeSTRING() { return GetToken(QactorParser.WhenTimeSTRING, 0); }
		public ITerminalNode ArrowSTRING() { return GetToken(QactorParser.ArrowSTRING, 0); }
		public ITerminalNode INT() { return GetToken(QactorParser.INT, 0); }
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public TimeoutIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeoutInt; } }
	}

	[RuleVersion(0)]
	public TimeoutIntContext timeoutInt() {
		TimeoutIntContext _localctx = new TimeoutIntContext(Context, State);
		EnterRule(_localctx, 102, RULE_timeoutInt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546; Match(WhenTimeSTRING);
			State = 547; _localctx.msec = Match(INT);
			State = 548; Match(ArrowSTRING);
			State = 549; _localctx.targetState = state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeoutVarContext : ParserRuleContext {
		public VariableXContext variable;
		public StateContext targetState;
		public ITerminalNode WhenTimeVarSTRING() { return GetToken(QactorParser.WhenTimeVarSTRING, 0); }
		public ITerminalNode ArrowSTRING() { return GetToken(QactorParser.ArrowSTRING, 0); }
		public VariableXContext variableX() {
			return GetRuleContext<VariableXContext>(0);
		}
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public TimeoutVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeoutVar; } }
	}

	[RuleVersion(0)]
	public TimeoutVarContext timeoutVar() {
		TimeoutVarContext _localctx = new TimeoutVarContext(Context, State);
		EnterRule(_localctx, 104, RULE_timeoutVar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; Match(WhenTimeVarSTRING);
			State = 552; _localctx.variable = variableX();
			State = 553; Match(ArrowSTRING);
			State = 554; _localctx.targetState = state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeoutVarRefContext : ParserRuleContext {
		public VarRefContext refvar;
		public StateContext targetState;
		public ITerminalNode WhenTimeVarRefSTRING() { return GetToken(QactorParser.WhenTimeVarRefSTRING, 0); }
		public ITerminalNode ArrowSTRING() { return GetToken(QactorParser.ArrowSTRING, 0); }
		public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public TimeoutVarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeoutVarRef; } }
	}

	[RuleVersion(0)]
	public TimeoutVarRefContext timeoutVarRef() {
		TimeoutVarRefContext _localctx = new TimeoutVarRefContext(Context, State);
		EnterRule(_localctx, 106, RULE_timeoutVarRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556; Match(WhenTimeVarRefSTRING);
			State = 557; _localctx.refvar = varRef();
			State = 558; Match(ArrowSTRING);
			State = 559; _localctx.targetState = state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeoutSolContext : ParserRuleContext {
		public VarSolRefContext refsoltime;
		public StateContext targetState;
		public ITerminalNode WhenTimeSolSTRING() { return GetToken(QactorParser.WhenTimeSolSTRING, 0); }
		public ITerminalNode ArrowSTRING() { return GetToken(QactorParser.ArrowSTRING, 0); }
		public VarSolRefContext varSolRef() {
			return GetRuleContext<VarSolRefContext>(0);
		}
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public TimeoutSolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeoutSol; } }
	}

	[RuleVersion(0)]
	public TimeoutSolContext timeoutSol() {
		TimeoutSolContext _localctx = new TimeoutSolContext(Context, State);
		EnterRule(_localctx, 108, RULE_timeoutSol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561; Match(WhenTimeSolSTRING);
			State = 562; _localctx.refsoltime = varSolRef();
			State = 563; Match(ArrowSTRING);
			State = 564; _localctx.targetState = state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InputTransitionContext : ParserRuleContext {
		public EventTransSwitchContext eventTransSwitch() {
			return GetRuleContext<EventTransSwitchContext>(0);
		}
		public MsgTransSwitchContext msgTransSwitch() {
			return GetRuleContext<MsgTransSwitchContext>(0);
		}
		public RequestTransSwitchContext requestTransSwitch() {
			return GetRuleContext<RequestTransSwitchContext>(0);
		}
		public ReplyTransSwitchContext replyTransSwitch() {
			return GetRuleContext<ReplyTransSwitchContext>(0);
		}
		public InputTransitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inputTransition; } }
	}

	[RuleVersion(0)]
	public InputTransitionContext inputTransition() {
		InputTransitionContext _localctx = new InputTransitionContext(Context, State);
		EnterRule(_localctx, 110, RULE_inputTransition);
		try {
			State = 570;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WhenEventSTRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566; eventTransSwitch();
				}
				break;
			case WhenMsgSTRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 567; msgTransSwitch();
				}
				break;
			case WhenRequestSTRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 568; requestTransSwitch();
				}
				break;
			case WhenReplySTRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 569; replyTransSwitch();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventTransSwitchContext : ParserRuleContext {
		public EventContext message;
		public AnyActionContext guard;
		public StateContext targetState;
		public ITerminalNode WhenEventSTRING() { return GetToken(QactorParser.WhenEventSTRING, 0); }
		public ITerminalNode ArrowSTRING() { return GetToken(QactorParser.ArrowSTRING, 0); }
		public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public ITerminalNode AndSTRING() { return GetToken(QactorParser.AndSTRING, 0); }
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public EventTransSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventTransSwitch; } }
	}

	[RuleVersion(0)]
	public EventTransSwitchContext eventTransSwitch() {
		EventTransSwitchContext _localctx = new EventTransSwitchContext(Context, State);
		EnterRule(_localctx, 112, RULE_eventTransSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 572; Match(WhenEventSTRING);
			State = 573; _localctx.message = @event();
			State = 576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AndSTRING) {
				{
				State = 574; Match(AndSTRING);
				State = 575; _localctx.guard = anyAction();
				}
			}

			State = 578; Match(ArrowSTRING);
			State = 579; _localctx.targetState = state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MsgTransSwitchContext : ParserRuleContext {
		public DispatchContext message;
		public AnyActionContext guard;
		public StateContext targetState;
		public ITerminalNode WhenMsgSTRING() { return GetToken(QactorParser.WhenMsgSTRING, 0); }
		public ITerminalNode ArrowSTRING() { return GetToken(QactorParser.ArrowSTRING, 0); }
		public DispatchContext dispatch() {
			return GetRuleContext<DispatchContext>(0);
		}
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public ITerminalNode AndSTRING() { return GetToken(QactorParser.AndSTRING, 0); }
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public MsgTransSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_msgTransSwitch; } }
	}

	[RuleVersion(0)]
	public MsgTransSwitchContext msgTransSwitch() {
		MsgTransSwitchContext _localctx = new MsgTransSwitchContext(Context, State);
		EnterRule(_localctx, 114, RULE_msgTransSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 581; Match(WhenMsgSTRING);
			State = 582; _localctx.message = dispatch();
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AndSTRING) {
				{
				State = 583; Match(AndSTRING);
				State = 584; _localctx.guard = anyAction();
				}
			}

			State = 587; Match(ArrowSTRING);
			State = 588; _localctx.targetState = state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequestTransSwitchContext : ParserRuleContext {
		public RequestContext message;
		public AnyActionContext guard;
		public StateContext targetState;
		public ITerminalNode WhenRequestSTRING() { return GetToken(QactorParser.WhenRequestSTRING, 0); }
		public ITerminalNode ArrowSTRING() { return GetToken(QactorParser.ArrowSTRING, 0); }
		public RequestContext request() {
			return GetRuleContext<RequestContext>(0);
		}
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public ITerminalNode AndSTRING() { return GetToken(QactorParser.AndSTRING, 0); }
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public RequestTransSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requestTransSwitch; } }
	}

	[RuleVersion(0)]
	public RequestTransSwitchContext requestTransSwitch() {
		RequestTransSwitchContext _localctx = new RequestTransSwitchContext(Context, State);
		EnterRule(_localctx, 116, RULE_requestTransSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 590; Match(WhenRequestSTRING);
			State = 591; _localctx.message = request();
			State = 594;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AndSTRING) {
				{
				State = 592; Match(AndSTRING);
				State = 593; _localctx.guard = anyAction();
				}
			}

			State = 596; Match(ArrowSTRING);
			State = 597; _localctx.targetState = state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplyTransSwitchContext : ParserRuleContext {
		public ReplyContext message;
		public AnyActionContext guard;
		public StateContext targetState;
		public ITerminalNode WhenReplySTRING() { return GetToken(QactorParser.WhenReplySTRING, 0); }
		public ITerminalNode ArrowSTRING() { return GetToken(QactorParser.ArrowSTRING, 0); }
		public ReplyContext reply() {
			return GetRuleContext<ReplyContext>(0);
		}
		public StateContext state() {
			return GetRuleContext<StateContext>(0);
		}
		public ITerminalNode AndSTRING() { return GetToken(QactorParser.AndSTRING, 0); }
		public AnyActionContext anyAction() {
			return GetRuleContext<AnyActionContext>(0);
		}
		public ReplyTransSwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replyTransSwitch; } }
	}

	[RuleVersion(0)]
	public ReplyTransSwitchContext replyTransSwitch() {
		ReplyTransSwitchContext _localctx = new ReplyTransSwitchContext(Context, State);
		EnterRule(_localctx, 118, RULE_replyTransSwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 599; Match(WhenReplySTRING);
			State = 600; _localctx.message = reply();
			State = 603;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AndSTRING) {
				{
				State = 601; Match(AndSTRING);
				State = 602; _localctx.guard = anyAction();
				}
			}

			State = 605; Match(ArrowSTRING);
			State = 606; _localctx.targetState = state();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PHeadContext : ParserRuleContext {
		public PAtomContext pAtom() {
			return GetRuleContext<PAtomContext>(0);
		}
		public PStructContext pStruct() {
			return GetRuleContext<PStructContext>(0);
		}
		public PStructRefContext pStructRef() {
			return GetRuleContext<PStructRefContext>(0);
		}
		public PHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pHead; } }
	}

	[RuleVersion(0)]
	public PHeadContext pHead() {
		PHeadContext _localctx = new PHeadContext(Context, State);
		EnterRule(_localctx, 120, RULE_pHead);
		try {
			State = 611;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 608; pAtom();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 609; pStruct();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 610; pStructRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PAtomContext : ParserRuleContext {
		public PAtomStringContext pAtomString() {
			return GetRuleContext<PAtomStringContext>(0);
		}
		public VariableXContext variableX() {
			return GetRuleContext<VariableXContext>(0);
		}
		public PAtomNumContext pAtomNum() {
			return GetRuleContext<PAtomNumContext>(0);
		}
		public PAtomicContext pAtomic() {
			return GetRuleContext<PAtomicContext>(0);
		}
		public VarRefContext varRef() {
			return GetRuleContext<VarRefContext>(0);
		}
		public VarSolRefContext varSolRef() {
			return GetRuleContext<VarSolRefContext>(0);
		}
		public VarRefInStrContext varRefInStr() {
			return GetRuleContext<VarRefInStrContext>(0);
		}
		public PAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pAtom; } }
	}

	[RuleVersion(0)]
	public PAtomContext pAtom() {
		PAtomContext _localctx = new PAtomContext(Context, State);
		EnterRule(_localctx, 122, RULE_pAtom);
		try {
			State = 620;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 613; pAtomString();
				}
				break;
			case VARID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 614; variableX();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 615; pAtomNum();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 616; pAtomic();
				}
				break;
			case SimbolDollarSTRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 617; varRef();
				}
				break;
			case SimbolAtSTRING:
				EnterOuterAlt(_localctx, 6);
				{
				State = 618; varSolRef();
				}
				break;
			case SimbolHashSTRING:
				EnterOuterAlt(_localctx, 7);
				{
				State = 619; varRefInStr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PAtomStringContext : ParserRuleContext {
		public IToken val;
		public ITerminalNode STRING() { return GetToken(QactorParser.STRING, 0); }
		public PAtomStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pAtomString; } }
	}

	[RuleVersion(0)]
	public PAtomStringContext pAtomString() {
		PAtomStringContext _localctx = new PAtomStringContext(Context, State);
		EnterRule(_localctx, 124, RULE_pAtomString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 622; _localctx.val = Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PAtomicContext : ParserRuleContext {
		public IToken val;
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PAtomicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pAtomic; } }
	}

	[RuleVersion(0)]
	public PAtomicContext pAtomic() {
		PAtomicContext _localctx = new PAtomicContext(Context, State);
		EnterRule(_localctx, 126, RULE_pAtomic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624; _localctx.val = Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PAtomNumContext : ParserRuleContext {
		public IToken val;
		public ITerminalNode INT() { return GetToken(QactorParser.INT, 0); }
		public PAtomNumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pAtomNum; } }
	}

	[RuleVersion(0)]
	public PAtomNumContext pAtomNum() {
		PAtomNumContext _localctx = new PAtomNumContext(Context, State);
		EnterRule(_localctx, 128, RULE_pAtomNum);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; _localctx.val = Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PStructRefContext : ParserRuleContext {
		public PStructContext @struct;
		public ITerminalNode SimbolDollarSTRING() { return GetToken(QactorParser.SimbolDollarSTRING, 0); }
		public PStructContext pStruct() {
			return GetRuleContext<PStructContext>(0);
		}
		public PStructRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pStructRef; } }
	}

	[RuleVersion(0)]
	public PStructRefContext pStructRef() {
		PStructRefContext _localctx = new PStructRefContext(Context, State);
		EnterRule(_localctx, 130, RULE_pStructRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; Match(SimbolDollarSTRING);
			State = 629; _localctx.@struct = pStruct();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PStructContext : ParserRuleContext {
		public IToken functor;
		public PHeadContext _pHead;
		public IList<PHeadContext> _msgArg = new List<PHeadContext>();
		public ITerminalNode OpenRoundSTRING() { return GetToken(QactorParser.OpenRoundSTRING, 0); }
		public ITerminalNode CloseRoundSTRING() { return GetToken(QactorParser.CloseRoundSTRING, 0); }
		public ITerminalNode ID() { return GetToken(QactorParser.ID, 0); }
		public PHeadContext[] pHead() {
			return GetRuleContexts<PHeadContext>();
		}
		public PHeadContext pHead(int i) {
			return GetRuleContext<PHeadContext>(i);
		}
		public ITerminalNode[] VirgilaSTRING() { return GetTokens(QactorParser.VirgilaSTRING); }
		public ITerminalNode VirgilaSTRING(int i) {
			return GetToken(QactorParser.VirgilaSTRING, i);
		}
		public PStructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pStruct; } }
	}

	[RuleVersion(0)]
	public PStructContext pStruct() {
		PStructContext _localctx = new PStructContext(Context, State);
		EnterRule(_localctx, 132, RULE_pStruct);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; _localctx.functor = Match(ID);
			State = 632; Match(OpenRoundSTRING);
			{
			State = 633; _localctx._pHead = pHead();
			_localctx._msgArg.Add(_localctx._pHead);
			}
			State = 638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VirgilaSTRING) {
				{
				{
				State = 634; Match(VirgilaSTRING);
				State = 635; _localctx._pHead = pHead();
				_localctx._msgArg.Add(_localctx._pHead);
				}
				}
				State = 640;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 641; Match(CloseRoundSTRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableXContext : ParserRuleContext {
		public IToken varName;
		public ITerminalNode VARID() { return GetToken(QactorParser.VARID, 0); }
		public VariableXContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableX; } }
	}

	[RuleVersion(0)]
	public VariableXContext variableX() {
		VariableXContext _localctx = new VariableXContext(Context, State);
		EnterRule(_localctx, 134, RULE_variableX);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			Variable
			State = 644; _localctx.varName = Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefContext : ParserRuleContext {
		public IToken varName;
		public ITerminalNode SimbolDollarSTRING() { return GetToken(QactorParser.SimbolDollarSTRING, 0); }
		public ITerminalNode VARID() { return GetToken(QactorParser.VARID, 0); }
		public VarRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRef; } }
	}

	[RuleVersion(0)]
	public VarRefContext varRef() {
		VarRefContext _localctx = new VarRefContext(Context, State);
		EnterRule(_localctx, 136, RULE_varRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 646; Match(SimbolDollarSTRING);
			State = 647; _localctx.varName = Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarRefInStrContext : ParserRuleContext {
		public IToken varName;
		public ITerminalNode SimbolHashSTRING() { return GetToken(QactorParser.SimbolHashSTRING, 0); }
		public ITerminalNode VARID() { return GetToken(QactorParser.VARID, 0); }
		public VarRefInStrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varRefInStr; } }
	}

	[RuleVersion(0)]
	public VarRefInStrContext varRefInStr() {
		VarRefInStrContext _localctx = new VarRefInStrContext(Context, State);
		EnterRule(_localctx, 138, RULE_varRefInStr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649; Match(SimbolHashSTRING);
			State = 650; _localctx.varName = Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarSolRefContext : ParserRuleContext {
		public IToken varName;
		public ITerminalNode SimbolAtSTRING() { return GetToken(QactorParser.SimbolAtSTRING, 0); }
		public ITerminalNode VARID() { return GetToken(QactorParser.VARID, 0); }
		public VarSolRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varSolRef; } }
	}

	[RuleVersion(0)]
	public VarSolRefContext varSolRef() {
		VarSolRefContext _localctx = new VarSolRefContext(Context, State);
		EnterRule(_localctx, 140, RULE_varSolRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; Match(SimbolAtSTRING);
			State = 653; _localctx.varName = Match(VARID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'U', '\x292', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '\x93', '\n', '\x2', 
		'\x3', '\x2', '\a', '\x2', '\x96', '\n', '\x2', '\f', '\x2', '\xE', '\x2', 
		'\x99', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\x9C', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x9F', '\v', '\x2', '\x3', '\x2', '\a', '\x2', '\xA2', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xA5', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\xAE', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\xB4', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\xB9', '\n', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xE3', '\n', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xEF', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x5', '\x13', '\x103', '\n', '\x13', '\x3', '\x13', '\a', '\x13', '\x106', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\x109', '\v', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x110', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', '\a', '\x14', 
		'\x114', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\x117', '\v', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\x11B', '\n', '\x14', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\x131', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\x137', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x13A', '\v', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\x140', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x143', '\v', '\x16', '\x3', '\x16', '\x5', '\x16', '\x146', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\x14D', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\x150', '\v', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\a', '\x17', '\x156', '\n', '\x17', '\f', '\x17', '\xE', 
		'\x17', '\x159', '\v', '\x17', '\x3', '\x17', '\x5', '\x17', '\x15C', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x16D', '\n', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x175', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x5', '#', '\x1A6', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', 
		'(', '\x1BC', '\n', '(', '\f', '(', '\xE', '(', '\x1BF', '\v', '(', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x5', '(', '\x1C4', '\n', '(', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '+', '\x3', '+', '\x3', '+', '\a', '+', '\x1D0', '\n', '+', '\f', 
		'+', '\xE', '+', '\x1D3', '\v', '+', '\x3', '+', '\x3', '+', '\x3', ',', 
		'\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', 
		'\x5', '-', '\x1DE', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '.', '\a', '.', '\x1E8', 
		'\n', '.', '\f', '.', '\xE', '.', '\x1EB', '\v', '.', '\x5', '.', '\x1ED', 
		'\n', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x1F7', '\n', '/', '\f', 
		'/', '\xE', '/', '\x1FA', '\v', '/', '\x5', '/', '\x1FC', '\n', '/', '\x3', 
		'/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x31', 
		'\x3', '\x31', '\x5', '\x31', '\x205', '\n', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x5', '\x32', '\x20E', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x33', '\x5', '\x33', '\x213', '\n', '\x33', '\x3', '\x33', '\a', 
		'\x33', '\x216', '\n', '\x33', '\f', '\x33', '\xE', '\x33', '\x219', '\v', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x21D', '\n', '\x33', 
		'\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', 
		'\x223', '\n', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x5', '\x39', '\x23D', '\n', '\x39', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x5', ':', '\x243', '\n', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', 
		';', '\x24C', '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', 
		'\x3', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x255', '\n', '<', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x5', '=', '\x25E', '\n', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x266', '\n', '>', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', 
		'?', '\x5', '?', '\x26F', '\n', '?', '\x3', '@', '\x3', '@', '\x3', '\x41', 
		'\x3', '\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', 
		'\x3', '\x44', '\a', '\x44', '\x27F', '\n', '\x44', '\f', '\x44', '\xE', 
		'\x44', '\x282', '\v', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'H', '\x2', '\x2', 'I', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 
		'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 
		'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', 
		'\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x2', '\x2', '\x2', '\x29A', 
		'\x2', '\x90', '\x3', '\x2', '\x2', '\x2', '\x4', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\xAD', '\x3', '\x2', '\x2', '\x2', '\b', '\xB3', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xE', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\xC4', '\x3', '\x2', '\x2', '\x2', '\x12', '\xC9', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\xCE', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x18', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\xDD', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xE4', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xEE', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xF0', '\x3', '\x2', '\x2', '\x2', '\"', '\xF5', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xFC', '\x3', '\x2', '\x2', '\x2', '&', '\x10C', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x130', '\x3', '\x2', '\x2', '\x2', '*', '\x132', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x147', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x30', '\x160', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x166', '\x3', '\x2', '\x2', '\x2', '\x34', '\x170', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x176', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x17A', '\x3', '\x2', '\x2', '\x2', ':', '\x180', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x187', '\x3', '\x2', '\x2', '\x2', '>', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x193', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1A5', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1A7', '\x3', '\x2', '\x2', '\x2', 'H', '\x1AA', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1AD', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1B0', '\x3', '\x2', '\x2', '\x2', 'N', '\x1B3', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1C5', '\x3', '\x2', '\x2', '\x2', 'R', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x1D6', '\x3', '\x2', '\x2', '\x2', 'X', '\x1DD', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x1DF', '\x3', '\x2', '\x2', '\x2', '\\', '\x1F0', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x204', '\x3', '\x2', '\x2', '\x2', '\x62', '\x206', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x20F', '\x3', '\x2', '\x2', '\x2', '\x66', '\x222', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x224', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x229', '\x3', '\x2', '\x2', '\x2', 'l', '\x22E', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x233', '\x3', '\x2', '\x2', '\x2', 'p', '\x23C', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x23E', '\x3', '\x2', '\x2', '\x2', 
		't', '\x247', '\x3', '\x2', '\x2', '\x2', 'v', '\x250', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x259', '\x3', '\x2', '\x2', '\x2', 'z', '\x265', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x26E', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x270', '\x3', '\x2', '\x2', '\x2', '\x80', '\x272', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x274', '\x3', '\x2', '\x2', '\x2', '\x84', '\x276', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x285', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x288', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x92', '\a', '\x3', '\x2', '\x2', 
		'\x91', '\x93', '\x5', '\x4', '\x3', '\x2', '\x92', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', '\x93', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x96', '\x5', '\x6', '\x4', '\x2', 
		'\x95', '\x94', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', '\x98', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9C', '\x5', '\x1A', 
		'\xE', '\x2', '\x9B', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x9D', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA2', 
		'\x5', '\x1E', '\x10', '\x2', '\xA1', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\xA5', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xA5', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xA7', '\a', '\xF', '\x2', '\x2', '\xA7', '\xA8', '\a', '\x5', 
		'\x2', '\x2', '\xA8', '\xA9', '\a', '\r', '\x2', '\x2', '\xA9', '\xAA', 
		'\a', '\x4', '\x2', '\x2', '\xAA', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAE', '\x5', '\b', '\x5', '\x2', '\xAC', '\xAE', '\x5', '\n', 
		'\x6', '\x2', '\xAD', '\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAC', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xB4', '\x5', '\x12', '\n', '\x2', '\xB0', '\xB4', '\x5', '\f', 
		'\a', '\x2', '\xB1', '\xB4', '\x5', '\xE', '\b', '\x2', '\xB2', '\xB4', 
		'\x5', '\x10', '\t', '\x2', '\xB3', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\xB3', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', '\t', 
		'\x3', '\x2', '\x2', '\x2', '\xB5', '\xB9', '\x5', '\x14', '\v', '\x2', 
		'\xB6', '\xB9', '\x5', '\x16', '\f', '\x2', '\xB7', '\xB9', '\x5', '\x18', 
		'\r', '\x2', '\xB8', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xB6', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\xB7', '\x3', '\x2', '\x2', '\x2', 
		'\xB9', '\v', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x10', 
		'\x2', '\x2', '\xBB', '\xBC', '\a', '\x3', '\x2', '\x2', '\xBC', '\xBD', 
		'\a', '\r', '\x2', '\x2', '\xBD', '\xBE', '\x5', 'z', '>', '\x2', '\xBE', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x11', '\x2', 
		'\x2', '\xC0', '\xC1', '\a', '\x3', '\x2', '\x2', '\xC1', '\xC2', '\a', 
		'\r', '\x2', '\x2', '\xC2', '\xC3', '\x5', 'z', '>', '\x2', '\xC3', '\xF', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', '\x12', '\x2', '\x2', 
		'\xC5', '\xC6', '\a', '\x3', '\x2', '\x2', '\xC6', '\xC7', '\a', '\r', 
		'\x2', '\x2', '\xC7', '\xC8', '\x5', 'z', '>', '\x2', '\xC8', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\a', '\x13', '\x2', '\x2', 
		'\xCA', '\xCB', '\a', '\x3', '\x2', '\x2', '\xCB', '\xCC', '\a', '\r', 
		'\x2', '\x2', '\xCC', '\xCD', '\x5', 'z', '>', '\x2', '\xCD', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\xCF', '\a', '\x14', '\x2', '\x2', 
		'\xCF', '\xD0', '\a', '\x3', '\x2', '\x2', '\xD0', '\xD1', '\a', '\r', 
		'\x2', '\x2', '\xD1', '\xD2', '\x5', 'z', '>', '\x2', '\xD2', '\x15', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\a', '\x15', '\x2', '\x2', 
		'\xD4', '\xD5', '\a', '\x3', '\x2', '\x2', '\xD5', '\xD6', '\a', '\r', 
		'\x2', '\x2', '\xD6', '\xD7', '\x5', 'z', '>', '\x2', '\xD7', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\a', '\x16', '\x2', '\x2', 
		'\xD9', '\xDA', '\a', '\x3', '\x2', '\x2', '\xDA', '\xDB', '\a', '\r', 
		'\x2', '\x2', '\xDB', '\xDC', '\x5', 'z', '>', '\x2', '\xDC', '\x19', 
		'\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\x17', '\x2', '\x2', 
		'\xDE', '\xDF', '\a', '\x3', '\x2', '\x2', '\xDF', '\xE0', '\a', '\x18', 
		'\x2', '\x2', '\xE0', '\xE2', '\x5', '\x1C', '\xF', '\x2', '\xE1', '\xE3', 
		'\a', '\x19', '\x2', '\x2', '\xE2', '\xE1', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE5', '\a', '\x1A', '\x2', '\x2', '\xE5', '\xE6', 
		'\a', '\x1B', '\x2', '\x2', '\xE6', '\xE7', '\a', '\x5', '\x2', '\x2', 
		'\xE7', '\xE8', '\a', '\x1C', '\x2', '\x2', '\xE8', '\xE9', '\a', '\x4', 
		'\x2', '\x2', '\xE9', '\xEA', '\a', '\x1D', '\x2', '\x2', '\xEA', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xEF', '\x5', '$', '\x13', '\x2', 
		'\xEC', '\xEF', '\x5', '\"', '\x12', '\x2', '\xED', '\xEF', '\x5', ' ', 
		'\x11', '\x2', '\xEE', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xEE', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xEF', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\a', '\xE', 
		'\x2', '\x2', '\xF1', '\xF2', '\a', '\x3', '\x2', '\x2', '\xF2', '\xF3', 
		'\a', ' ', '\x2', '\x2', '\xF3', '\xF4', '\x5', '\x1A', '\xE', '\x2', 
		'\xF4', '!', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\a', '\x1E', 
		'\x2', '\x2', '\xF6', '\xF7', '\a', '\x3', '\x2', '\x2', '\xF7', '\xF8', 
		'\a', ' ', '\x2', '\x2', '\xF8', '\xF9', '\x5', '\x1A', '\xE', '\x2', 
		'\xF9', '\xFA', '\a', '!', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x5', 
		'\x2', '\x2', '\xFB', '#', '\x3', '\x2', '\x2', '\x2', '\xFC', '\xFD', 
		'\a', '\x1F', '\x2', '\x2', '\xFD', '\xFE', '\a', '\x3', '\x2', '\x2', 
		'\xFE', '\xFF', '\a', ' ', '\x2', '\x2', '\xFF', '\x100', '\x5', '\x1A', 
		'\xE', '\x2', '\x100', '\x102', '\a', '\"', '\x2', '\x2', '\x101', '\x103', 
		'\x5', 'V', ',', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x106', '\x5', '&', '\x14', '\x2', '\x105', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x106', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x105', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '\x10A', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10B', '\a', 
		'#', '\x2', '\x2', '\x10B', '%', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\a', '$', '\x2', '\x2', '\x10D', '\x10F', '\a', '\x3', '\x2', 
		'\x2', '\x10E', '\x110', '\a', '%', '\x2', '\x2', '\x10F', '\x10E', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x110', '\x3', '\x2', '\x2', '\x2', '\x110', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x111', '\x115', '\a', '\"', '\x2', 
		'\x2', '\x112', '\x114', '\x5', '(', '\x15', '\x2', '\x113', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x114', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x115', '\x113', '\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x118', '\x3', '\x2', '\x2', '\x2', '\x117', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x118', '\x11A', '\a', '#', '\x2', 
		'\x2', '\x119', '\x11B', '\x5', '`', '\x31', '\x2', '\x11A', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', '\x2', 
		'\x11B', '\'', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x131', '\x5', ',', 
		'\x17', '\x2', '\x11D', '\x131', '\x5', '*', '\x16', '\x2', '\x11E', '\x131', 
		'\x5', '\x30', '\x19', '\x2', '\x11F', '\x131', '\x5', '.', '\x18', '\x2', 
		'\x120', '\x131', '\x5', '\x32', '\x1A', '\x2', '\x121', '\x131', '\x5', 
		'\x34', '\x1B', '\x2', '\x122', '\x131', '\x5', '\x36', '\x1C', '\x2', 
		'\x123', '\x131', '\x5', '\x38', '\x1D', '\x2', '\x124', '\x131', '\x5', 
		':', '\x1E', '\x2', '\x125', '\x131', '\x5', '<', '\x1F', '\x2', '\x126', 
		'\x131', '\x5', '>', ' ', '\x2', '\x127', '\x131', '\x5', '@', '!', '\x2', 
		'\x128', '\x131', '\x5', '\x42', '\"', '\x2', '\x129', '\x131', '\x5', 
		'\x44', '#', '\x2', '\x12A', '\x131', '\x5', 'N', '(', '\x2', '\x12B', 
		'\x131', '\x5', 'P', ')', '\x2', '\x12C', '\x131', '\x5', 'R', '*', '\x2', 
		'\x12D', '\x131', '\x5', 'X', '-', '\x2', '\x12E', '\x131', '\x5', 'V', 
		',', '\x2', '\x12F', '\x131', '\x5', '^', '\x30', '\x2', '\x130', '\x11C', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x11D', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x11F', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x120', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x130', '\x122', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x123', '\x3', '\x2', '\x2', '\x2', '\x130', '\x124', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x126', '\x3', '\x2', '\x2', '\x2', '\x130', '\x127', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x128', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x129', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12A', '\x3', '\x2', '\x2', 
		'\x2', '\x130', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x12E', '\x3', '\x2', '\x2', '\x2', '\x130', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x131', ')', '\x3', '\x2', '\x2', '\x2', '\x132', 
		'\x133', '\b', '\x16', '\x1', '\x2', '\x133', '\x134', '\a', '&', '\x2', 
		'\x2', '\x134', '\x138', '\a', '\"', '\x2', '\x2', '\x135', '\x137', '\x5', 
		'(', '\x15', '\x2', '\x136', '\x135', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x138', '\x139', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13B', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x138', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x145', '\a', '#', '\x2', '\x2', '\x13C', '\x13D', '\a', '\'', 
		'\x2', '\x2', '\x13D', '\x141', '\a', '\"', '\x2', '\x2', '\x13E', '\x140', 
		'\x5', '(', '\x15', '\x2', '\x13F', '\x13E', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x143', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13F', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x142', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x144', '\x3', '\x2', '\x2', '\x2', '\x143', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x146', '\a', '#', '\x2', '\x2', '\x145', '\x13C', '\x3', 
		'\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'+', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', '\b', '\x17', '\x1', 
		'\x2', '\x148', '\x149', '\a', '\x46', '\x2', '\x2', '\x149', '\x14A', 
		'\x5', 'V', ',', '\x2', '\x14A', '\x14E', '\a', '\"', '\x2', '\x2', '\x14B', 
		'\x14D', '\x5', '(', '\x15', '\x2', '\x14C', '\x14B', '\x3', '\x2', '\x2', 
		'\x2', '\x14D', '\x150', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14C', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', '\x2', 
		'\x14F', '\x151', '\x3', '\x2', '\x2', '\x2', '\x150', '\x14E', '\x3', 
		'\x2', '\x2', '\x2', '\x151', '\x15B', '\a', '#', '\x2', '\x2', '\x152', 
		'\x153', '\a', '\'', '\x2', '\x2', '\x153', '\x157', '\a', '\"', '\x2', 
		'\x2', '\x154', '\x156', '\x5', '(', '\x15', '\x2', '\x155', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x156', '\x159', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x155', '\x3', '\x2', '\x2', '\x2', '\x157', '\x158', '\x3', 
		'\x2', '\x2', '\x2', '\x158', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x159', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15C', '\a', '#', '\x2', 
		'\x2', '\x15B', '\x152', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x15D', '\x15E', '\b', '\x18', '\x1', '\x2', '\x15E', '\x15F', '\a', 
		'(', '\x2', '\x2', '\x15F', '/', '\x3', '\x2', '\x2', '\x2', '\x160', 
		'\x161', '\b', '\x19', '\x1', '\x2', '\x161', '\x162', '\a', ')', '\x2', 
		'\x2', '\x162', '\x163', '\a', '*', '\x2', '\x2', '\x163', '\x164', '\x5', 
		'z', '>', '\x2', '\x164', '\x165', '\a', '+', '\x2', '\x2', '\x165', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\b', '\x1A', '\x1', '\x2', 
		'\x167', '\x168', '\a', ',', '\x2', '\x2', '\x168', '\x169', '\a', '*', 
		'\x2', '\x2', '\x169', '\x16C', '\x5', 'z', '>', '\x2', '\x16A', '\x16B', 
		'\a', 'R', '\x2', '\x2', '\x16B', '\x16D', '\x5', '\x88', '\x45', '\x2', 
		'\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x16D', '\x3', 
		'\x2', '\x2', '\x2', '\x16D', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\a', '+', '\x2', '\x2', '\x16F', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x171', '\b', '\x1B', '\x1', '\x2', '\x171', '\x174', 
		'\a', '-', '\x2', '\x2', '\x172', '\x175', '\a', '\x30', '\x2', '\x2', 
		'\x173', '\x175', '\a', '\x31', '\x2', '\x2', '\x174', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x173', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x176', '\x177', '\b', '\x1C', '\x1', 
		'\x2', '\x177', '\x178', '\a', '.', '\x2', '\x2', '\x178', '\x179', '\a', 
		'\n', '\x2', '\x2', '\x179', '\x37', '\x3', '\x2', '\x2', '\x2', '\x17A', 
		'\x17B', '\b', '\x1D', '\x1', '\x2', '\x17B', '\x17C', '\a', '/', '\x2', 
		'\x2', '\x17C', '\x17D', '\a', '\n', '\x2', '\x2', '\x17D', '\x17E', '\a', 
		'\x32', '\x2', '\x2', '\x17E', '\x17F', '\a', '\n', '\x2', '\x2', '\x17F', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x180', '\x181', '\a', '\x33', '\x2', 
		'\x2', '\x181', '\x182', '\x5', '\x1E', '\x10', '\x2', '\x182', '\x183', 
		'\a', '\x35', '\x2', '\x2', '\x183', '\x184', '\x5', '\x12', '\n', '\x2', 
		'\x184', '\x185', '\a', '\r', '\x2', '\x2', '\x185', '\x186', '\x5', 'z', 
		'>', '\x2', '\x186', ';', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', 
		'\a', '\x34', '\x2', '\x2', '\x188', '\x189', '\x5', '\f', '\a', '\x2', 
		'\x189', '\x18A', '\a', '\r', '\x2', '\x2', '\x18A', '\x18B', '\x5', 'z', 
		'>', '\x2', '\x18B', '=', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18D', 
		'\a', '\x36', '\x2', '\x2', '\x18D', '\x18E', '\x5', '\x1E', '\x10', '\x2', 
		'\x18E', '\x18F', '\a', '\x35', '\x2', '\x2', '\x18F', '\x190', '\x5', 
		'\x14', '\v', '\x2', '\x190', '\x191', '\a', '\r', '\x2', '\x2', '\x191', 
		'\x192', '\x5', 'z', '>', '\x2', '\x192', '?', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x194', '\a', '\x37', '\x2', '\x2', '\x194', '\x195', '\x5', 
		'\x14', '\v', '\x2', '\x195', '\x196', '\a', '\x39', '\x2', '\x2', '\x196', 
		'\x197', '\x5', '\x16', '\f', '\x2', '\x197', '\x198', '\a', '\r', '\x2', 
		'\x2', '\x198', '\x199', '\x5', 'z', '>', '\x2', '\x199', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x19A', '\x19B', '\a', '\x38', '\x2', '\x2', '\x19B', 
		'\x19C', '\x5', '\x14', '\v', '\x2', '\x19C', '\x19D', '\a', '\x36', '\x2', 
		'\x2', '\x19D', '\x19E', '\x5', '\x14', '\v', '\x2', '\x19E', '\x19F', 
		'\a', '\r', '\x2', '\x2', '\x19F', '\x1A0', '\x5', 'z', '>', '\x2', '\x1A0', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A6', '\x5', '\x46', '$', 
		'\x2', '\x1A2', '\x1A6', '\x5', 'H', '%', '\x2', '\x1A3', '\x1A6', '\x5', 
		'J', '&', '\x2', '\x1A4', '\x1A6', '\x5', 'L', '\'', '\x2', '\x1A5', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x1A4', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x1A8', '\a', ':', '\x2', '\x2', '\x1A8', '\x1A9', '\a', '\x4', '\x2', 
		'\x2', '\x1A9', 'G', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\a', 
		';', '\x2', '\x2', '\x1AB', '\x1AC', '\x5', '\x88', '\x45', '\x2', '\x1AC', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\a', '<', '\x2', '\x2', 
		'\x1AE', '\x1AF', '\x5', '\x8A', '\x46', '\x2', '\x1AF', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x1B1', '\a', '=', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\x5', '\x8E', 'H', '\x2', '\x1B2', 'M', '\x3', '\x2', '\x2', '\x2', '\x1B3', 
		'\x1B4', '\a', '>', '\x2', '\x2', '\x1B4', '\x1B5', '\a', '*', '\x2', 
		'\x2', '\x1B5', '\x1B6', '\x5', '\x6', '\x4', '\x2', '\x1B6', '\x1B7', 
		'\a', '\r', '\x2', '\x2', '\x1B7', '\x1B8', '\x5', 'z', '>', '\x2', '\x1B8', 
		'\x1B9', '\a', '+', '\x2', '\x2', '\x1B9', '\x1BD', '\a', '\"', '\x2', 
		'\x2', '\x1BA', '\x1BC', '\x5', '(', '\x15', '\x2', '\x1BB', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BF', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		'\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C3', '\a', '#', '\x2', 
		'\x2', '\x1C1', '\x1C2', '\a', '\'', '\x2', '\x2', '\x1C2', '\x1C4', '\x5', 
		'T', '+', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C4', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C6', '\a', '?', '\x2', '\x2', '\x1C6', '\x1C7', '\a', 
		'\x4', '\x2', '\x2', '\x1C7', 'Q', '\x3', '\x2', '\x2', '\x2', '\x1C8', 
		'\x1C9', '\b', '*', '\x1', '\x2', '\x1C9', '\x1CA', '\a', '@', '\x2', 
		'\x2', '\x1CA', '\x1CB', '\x5', 'V', ',', '\x2', '\x1CB', 'S', '\x3', 
		'\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\b', '+', '\x1', '\x2', '\x1CD', 
		'\x1D1', '\a', '\"', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', '(', '\x15', 
		'\x2', '\x1CF', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D2', '\x1D4', '\x3', 
		'\x2', '\x2', '\x2', '\x1D3', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D4', 
		'\x1D5', '\a', '#', '\x2', '\x2', '\x1D5', 'U', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D7', '\b', ',', '\x1', '\x2', '\x1D7', '\x1D8', '\a', '\x1A', 
		'\x2', '\x2', '\x1D8', '\x1D9', '\a', '\v', '\x2', '\x2', '\x1D9', '\x1DA', 
		'\a', '\x1D', '\x2', '\x2', '\x1DA', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x1DB', '\x1DE', '\x5', 'Z', '.', '\x2', '\x1DC', '\x1DE', '\x5', '\\', 
		'/', '\x2', '\x1DD', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DD', '\x1DC', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', 'Y', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1E0', '\a', '\x41', '\x2', '\x2', '\x1E0', '\x1E1', '\a', 
		'\f', '\x2', '\x2', '\x1E1', '\x1E2', '\a', '*', '\x2', '\x2', '\x1E2', 
		'\x1EC', '\a', '\x42', '\x2', '\x2', '\x1E3', '\x1E4', '\a', 'R', '\x2', 
		'\x2', '\x1E4', '\x1E9', '\x5', 'z', '>', '\x2', '\x1E5', '\x1E6', '\a', 
		'R', '\x2', '\x2', '\x1E6', '\x1E8', '\x5', 'z', '>', '\x2', '\x1E7', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1EB', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1E7', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EA', 
		'\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1ED', '\x3', '\x2', '\x2', '\x2', 
		'\x1EB', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1EC', '\x1E3', '\x3', 
		'\x2', '\x2', '\x2', '\x1EC', '\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1ED', 
		'\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\a', '+', '\x2', 
		'\x2', '\x1EF', '[', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\a', 
		'\x43', '\x2', '\x2', '\x1F1', '\x1F2', '\a', '\f', '\x2', '\x2', '\x1F2', 
		'\x1FB', '\a', '*', '\x2', '\x2', '\x1F3', '\x1F8', '\x5', 'z', '>', '\x2', 
		'\x1F4', '\x1F5', '\a', 'R', '\x2', '\x2', '\x1F5', '\x1F7', '\x5', 'z', 
		'>', '\x2', '\x1F6', '\x1F4', '\x3', '\x2', '\x2', '\x2', '\x1F7', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F8', '\x1F9', '\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FC', '\x3', 
		'\x2', '\x2', '\x2', '\x1FA', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FB', 
		'\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', 
		'\x2', '\x1FC', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', 
		'\a', '+', '\x2', '\x2', '\x1FE', ']', '\x3', '\x2', '\x2', '\x2', '\x1FF', 
		'\x200', '\a', '\x44', '\x2', '\x2', '\x200', '\x201', '\a', '\x5', '\x2', 
		'\x2', '\x201', '_', '\x3', '\x2', '\x2', '\x2', '\x202', '\x205', '\x5', 
		'\x62', '\x32', '\x2', '\x203', '\x205', '\x5', '\x64', '\x33', '\x2', 
		'\x204', '\x202', '\x3', '\x2', '\x2', '\x2', '\x204', '\x203', '\x3', 
		'\x2', '\x2', '\x2', '\x205', '\x61', '\x3', '\x2', '\x2', '\x2', '\x206', 
		'\x207', '\a', '\x45', '\x2', '\x2', '\x207', '\x20D', '\x5', '&', '\x14', 
		'\x2', '\x208', '\x209', '\a', '\x46', '\x2', '\x2', '\x209', '\x20A', 
		'\x5', 'V', ',', '\x2', '\x20A', '\x20B', '\a', '\'', '\x2', '\x2', '\x20B', 
		'\x20C', '\x5', '&', '\x14', '\x2', '\x20C', '\x20E', '\x3', '\x2', '\x2', 
		'\x2', '\x20D', '\x208', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20E', 
		'\x3', '\x2', '\x2', '\x2', '\x20E', '\x63', '\x3', '\x2', '\x2', '\x2', 
		'\x20F', '\x210', '\a', 'G', '\x2', '\x2', '\x210', '\x212', '\a', '\x3', 
		'\x2', '\x2', '\x211', '\x213', '\x5', '\x66', '\x34', '\x2', '\x212', 
		'\x211', '\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\x3', '\x2', '\x2', 
		'\x2', '\x213', '\x217', '\x3', '\x2', '\x2', '\x2', '\x214', '\x216', 
		'\x5', 'p', '\x39', '\x2', '\x215', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'\x216', '\x219', '\x3', '\x2', '\x2', '\x2', '\x217', '\x215', '\x3', 
		'\x2', '\x2', '\x2', '\x217', '\x218', '\x3', '\x2', '\x2', '\x2', '\x218', 
		'\x21C', '\x3', '\x2', '\x2', '\x2', '\x219', '\x217', '\x3', '\x2', '\x2', 
		'\x2', '\x21A', '\x21B', '\a', '\'', '\x2', '\x2', '\x21B', '\x21D', '\x5', 
		'\x62', '\x32', '\x2', '\x21C', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21C', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x21E', '\x223', '\x5', 'h', '\x35', '\x2', '\x21F', '\x223', 
		'\x5', 'j', '\x36', '\x2', '\x220', '\x223', '\x5', 'n', '\x38', '\x2', 
		'\x221', '\x223', '\x5', 'l', '\x37', '\x2', '\x222', '\x21E', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x222', 
		'\x220', '\x3', '\x2', '\x2', '\x2', '\x222', '\x221', '\x3', '\x2', '\x2', 
		'\x2', '\x223', 'g', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\a', 
		'H', '\x2', '\x2', '\x225', '\x226', '\a', '\x4', '\x2', '\x2', '\x226', 
		'\x227', '\a', 'I', '\x2', '\x2', '\x227', '\x228', '\x5', '&', '\x14', 
		'\x2', '\x228', 'i', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\a', 
		'J', '\x2', '\x2', '\x22A', '\x22B', '\x5', '\x88', '\x45', '\x2', '\x22B', 
		'\x22C', '\a', 'I', '\x2', '\x2', '\x22C', '\x22D', '\x5', '&', '\x14', 
		'\x2', '\x22D', 'k', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\a', 
		'K', '\x2', '\x2', '\x22F', '\x230', '\x5', '\x8A', '\x46', '\x2', '\x230', 
		'\x231', '\a', 'I', '\x2', '\x2', '\x231', '\x232', '\x5', '&', '\x14', 
		'\x2', '\x232', 'm', '\x3', '\x2', '\x2', '\x2', '\x233', '\x234', '\a', 
		'L', '\x2', '\x2', '\x234', '\x235', '\x5', '\x8E', 'H', '\x2', '\x235', 
		'\x236', '\a', 'I', '\x2', '\x2', '\x236', '\x237', '\x5', '&', '\x14', 
		'\x2', '\x237', 'o', '\x3', '\x2', '\x2', '\x2', '\x238', '\x23D', '\x5', 
		'r', ':', '\x2', '\x239', '\x23D', '\x5', 't', ';', '\x2', '\x23A', '\x23D', 
		'\x5', 'v', '<', '\x2', '\x23B', '\x23D', '\x5', 'x', '=', '\x2', '\x23C', 
		'\x238', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x239', '\x3', '\x2', '\x2', 
		'\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', 'q', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x23F', '\a', 'M', '\x2', '\x2', '\x23F', '\x242', '\x5', '\f', 
		'\a', '\x2', '\x240', '\x241', '\a', 'Q', '\x2', '\x2', '\x241', '\x243', 
		'\x5', 'V', ',', '\x2', '\x242', '\x240', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x243', '\x3', '\x2', '\x2', '\x2', '\x243', '\x244', '\x3', 
		'\x2', '\x2', '\x2', '\x244', '\x245', '\a', 'I', '\x2', '\x2', '\x245', 
		'\x246', '\x5', '&', '\x14', '\x2', '\x246', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x247', '\x248', '\a', 'N', '\x2', '\x2', '\x248', '\x24B', '\x5', 
		'\x12', '\n', '\x2', '\x249', '\x24A', '\a', 'Q', '\x2', '\x2', '\x24A', 
		'\x24C', '\x5', 'V', ',', '\x2', '\x24B', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', 
		'\x3', '\x2', '\x2', '\x2', '\x24D', '\x24E', '\a', 'I', '\x2', '\x2', 
		'\x24E', '\x24F', '\x5', '&', '\x14', '\x2', '\x24F', 'u', '\x3', '\x2', 
		'\x2', '\x2', '\x250', '\x251', '\a', 'O', '\x2', '\x2', '\x251', '\x254', 
		'\x5', '\x14', '\v', '\x2', '\x252', '\x253', '\a', 'Q', '\x2', '\x2', 
		'\x253', '\x255', '\x5', 'V', ',', '\x2', '\x254', '\x252', '\x3', '\x2', 
		'\x2', '\x2', '\x254', '\x255', '\x3', '\x2', '\x2', '\x2', '\x255', '\x256', 
		'\x3', '\x2', '\x2', '\x2', '\x256', '\x257', '\a', 'I', '\x2', '\x2', 
		'\x257', '\x258', '\x5', '&', '\x14', '\x2', '\x258', 'w', '\x3', '\x2', 
		'\x2', '\x2', '\x259', '\x25A', '\a', 'P', '\x2', '\x2', '\x25A', '\x25D', 
		'\x5', '\x16', '\f', '\x2', '\x25B', '\x25C', '\a', 'Q', '\x2', '\x2', 
		'\x25C', '\x25E', '\x5', 'V', ',', '\x2', '\x25D', '\x25B', '\x3', '\x2', 
		'\x2', '\x2', '\x25D', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', '\a', 'I', '\x2', '\x2', 
		'\x260', '\x261', '\x5', '&', '\x14', '\x2', '\x261', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x262', '\x266', '\x5', '|', '?', '\x2', '\x263', '\x266', 
		'\x5', '\x86', '\x44', '\x2', '\x264', '\x266', '\x5', '\x84', '\x43', 
		'\x2', '\x265', '\x262', '\x3', '\x2', '\x2', '\x2', '\x265', '\x263', 
		'\x3', '\x2', '\x2', '\x2', '\x265', '\x264', '\x3', '\x2', '\x2', '\x2', 
		'\x266', '{', '\x3', '\x2', '\x2', '\x2', '\x267', '\x26F', '\x5', '~', 
		'@', '\x2', '\x268', '\x26F', '\x5', '\x88', '\x45', '\x2', '\x269', '\x26F', 
		'\x5', '\x82', '\x42', '\x2', '\x26A', '\x26F', '\x5', '\x80', '\x41', 
		'\x2', '\x26B', '\x26F', '\x5', '\x8A', '\x46', '\x2', '\x26C', '\x26F', 
		'\x5', '\x8E', 'H', '\x2', '\x26D', '\x26F', '\x5', '\x8C', 'G', '\x2', 
		'\x26E', '\x267', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x268', '\x3', 
		'\x2', '\x2', '\x2', '\x26E', '\x269', '\x3', '\x2', '\x2', '\x2', '\x26E', 
		'\x26A', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26B', '\x3', '\x2', '\x2', 
		'\x2', '\x26E', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26E', '\x26D', 
		'\x3', '\x2', '\x2', '\x2', '\x26F', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x270', '\x271', '\a', '\x5', '\x2', '\x2', '\x271', '\x7F', '\x3', '\x2', 
		'\x2', '\x2', '\x272', '\x273', '\a', '\x3', '\x2', '\x2', '\x273', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\a', '\x4', '\x2', '\x2', 
		'\x275', '\x83', '\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\a', 'S', 
		'\x2', '\x2', '\x277', '\x278', '\x5', '\x86', '\x44', '\x2', '\x278', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\a', '\x3', '\x2', 
		'\x2', '\x27A', '\x27B', '\a', '*', '\x2', '\x2', '\x27B', '\x280', '\x5', 
		'z', '>', '\x2', '\x27C', '\x27D', '\a', 'R', '\x2', '\x2', '\x27D', '\x27F', 
		'\x5', 'z', '>', '\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x282', '\x3', '\x2', '\x2', '\x2', '\x280', '\x27E', '\x3', 
		'\x2', '\x2', '\x2', '\x280', '\x281', '\x3', '\x2', '\x2', '\x2', '\x281', 
		'\x283', '\x3', '\x2', '\x2', '\x2', '\x282', '\x280', '\x3', '\x2', '\x2', 
		'\x2', '\x283', '\x284', '\a', '+', '\x2', '\x2', '\x284', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x285', '\x286', '\b', '\x45', '\x1', '\x2', '\x286', 
		'\x287', '\a', '\n', '\x2', '\x2', '\x287', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x288', '\x289', '\a', 'S', '\x2', '\x2', '\x289', '\x28A', '\a', 
		'\n', '\x2', '\x2', '\x28A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x28C', '\a', 'T', '\x2', '\x2', '\x28C', '\x28D', '\a', '\n', '\x2', 
		'\x2', '\x28D', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x28F', 
		'\a', 'U', '\x2', '\x2', '\x28F', '\x290', '\a', '\n', '\x2', '\x2', '\x290', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x30', '\x92', '\x97', '\x9D', '\xA3', 
		'\xAD', '\xB3', '\xB8', '\xE2', '\xEE', '\x102', '\x107', '\x10F', '\x115', 
		'\x11A', '\x130', '\x138', '\x141', '\x145', '\x14E', '\x157', '\x15B', 
		'\x16C', '\x174', '\x1A5', '\x1BD', '\x1C3', '\x1D1', '\x1DD', '\x1E9', 
		'\x1EC', '\x1F8', '\x1FB', '\x204', '\x20D', '\x212', '\x217', '\x21C', 
		'\x222', '\x23C', '\x242', '\x24B', '\x254', '\x25D', '\x265', '\x26E', 
		'\x280',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
